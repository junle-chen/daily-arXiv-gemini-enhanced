{"id": "2510.15368", "pdf": "https://arxiv.org/pdf/2510.15368", "abs": "https://arxiv.org/abs/2510.15368", "authors": ["Renrui Li", "Qingzhi Ma", "Jiajie Xu", "Lei Zhao", "An Liu"], "title": "TKHist: Cardinality Estimation for Join Queries via Histograms with Dominant Attribute Correlation Finding", "categories": ["cs.DB"], "comment": "CIKM2025", "summary": "Cardinality estimation has long been crucial for cost-based database\noptimizers in identifying optimal query execution plans, attracting significant\nattention over the past decades. While recent advancements have significantly\nimproved the accuracy of multi-table join query estimations, these methods\nintroduce challenges such as higher space overhead, increased latency, and\ngreater complexity, especially when integrated with the binary join framework.\nIn this paper, we introduce a novel cardinality estimation method named TKHist,\nwhich addresses these challenges by relaxing the uniformity assumption in\nhistograms. TKHist captures bin-wise non-uniformity information, enabling\naccurate cardinality estimation for join queries without filter predicates.\nFurthermore, we explore the attribute independent assumption, which can lead to\nsignificant over-estimation rather than under-estimation in multi-table join\nqueries. To address this issue, we propose the dominating join path correlation\ndiscovery algorithm to highlight and manage correlations between join keys and\nfilter predicates. Our extensive experiments on popular benchmarks demonstrate\nthat TKHist reduces error variance by 2-3 orders of magnitude compared to SOTA\nmethods, while maintaining comparable or lower memory usage.", "AI": {"tldr": "TKHist \u901a\u8fc7\u6355\u83b7 bin-wise \u7684\u975e\u5747\u5300\u4fe1\u606f\uff0c\u5e76\u7ed3\u5408 dominating join path correlation discovery \u7b97\u6cd5\uff0c\u5b9e\u73b0\u4e86\u5bf9\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u7684\u9ad8\u7cbe\u5ea6\u57fa\u6570\u4f30\u8ba1\u3002", "motivation": "\u73b0\u6709\u7684\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5\u5728\u63d0\u9ad8\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u4f30\u8ba1\u51c6\u786e\u6027\u7684\u540c\u65f6\uff0c\u5f15\u5165\u4e86\u66f4\u9ad8\u7684\u7a7a\u95f4\u5f00\u9500\u3001\u5ef6\u8fdf\u548c\u590d\u6742\u6027\uff0c\u5c24\u5176\u662f\u5728\u4e0e\u4e8c\u5143\u8fde\u63a5\u6846\u67b6\u96c6\u6210\u65f6\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5 TKHist\uff0c\u5b83\u901a\u8fc7\u653e\u5bbd\u76f4\u65b9\u56fe\u4e2d\u7684\u5747\u5300\u6027\u5047\u8bbe\u6765\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u3002TKHist \u6355\u83b7 bin-wise \u7684\u975e\u5747\u5300\u4fe1\u606f\uff0c\u4ece\u800c\u80fd\u591f\u51c6\u786e\u4f30\u8ba1\u6ca1\u6709\u8fc7\u6ee4\u8c13\u8bcd\u7684\u8fde\u63a5\u67e5\u8be2\u7684\u57fa\u6570\u3002\u6b64\u5916\uff0c\u8fd8\u63a2\u7d22\u4e86\u5c5e\u6027\u72ec\u7acb\u6027\u5047\u8bbe\uff0c\u5e76\u63d0\u51fa\u4e86 dominating join path correlation discovery \u7b97\u6cd5\u6765\u7a81\u51fa\u548c\u7ba1\u7406\u8fde\u63a5\u952e\u548c\u8fc7\u6ee4\u8c13\u8bcd\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002", "result": "\u5728\u6d41\u884c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fdb\u884c\u7684\u5927\u91cf\u5b9e\u9a8c\u8868\u660e\uff0c\u4e0e SOTA \u65b9\u6cd5\u76f8\u6bd4\uff0cTKHist \u5c06\u8bef\u5dee\u65b9\u5dee\u964d\u4f4e\u4e86 2-3 \u4e2a\u6570\u91cf\u7ea7\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u76f8\u5f53\u6216\u66f4\u4f4e\u7684\u5185\u5b58\u4f7f\u7528\u7387\u3002", "conclusion": "TKHist \u662f\u4e00\u79cd\u6709\u6548\u7684\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5\uff0c\u5b83\u80fd\u591f\u5728\u4fdd\u6301\u8f83\u4f4e\u5185\u5b58\u5f00\u9500\u7684\u540c\u65f6\uff0c\u663e\u8457\u63d0\u9ad8\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u7684\u4f30\u8ba1\u51c6\u786e\u6027\u3002", "summary_zh": "\u57fa\u6570\u4f30\u8ba1\u957f\u671f\u4ee5\u6765\u5bf9\u4e8e\u57fa\u4e8e\u6210\u672c\u7684\u6570\u636e\u5e93\u4f18\u5316\u5668\u8bc6\u522b\u6700\u4f73\u67e5\u8be2\u6267\u884c\u8ba1\u5212\u81f3\u5173\u91cd\u8981\uff0c\u5e76\u5728\u8fc7\u53bb\u51e0\u5341\u5e74\u4e2d\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\u3002\u867d\u7136\u6700\u8fd1\u7684\u8fdb\u5c55\u663e\u7740\u63d0\u9ad8\u4e86\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u4f30\u8ba1\u7684\u51c6\u786e\u6027\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6cd5\u5f15\u5165\u4e86\u66f4\u9ad8\u7684\u7a7a\u95f4\u5f00\u9500\u3001\u5ef6\u8fdf\u548c\u590d\u6742\u6027\uff0c\u5c24\u5176\u662f\u5728\u4e0e\u4e8c\u5143\u8fde\u63a5\u6846\u67b6\u96c6\u6210\u65f6\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u79cd\u540d\u4e3a TKHist \u7684\u65b0\u578b\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7\u653e\u5bbd\u76f4\u65b9\u56fe\u4e2d\u7684\u5747\u5300\u6027\u5047\u8bbe\u6765\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u3002TKHist \u6355\u83b7 bin-wise \u7684\u975e\u5747\u5300\u4fe1\u606f\uff0c\u4ece\u800c\u80fd\u591f\u51c6\u786e\u4f30\u8ba1\u6ca1\u6709\u8fc7\u6ee4\u8c13\u8bcd\u7684\u8fde\u63a5\u67e5\u8be2\u7684\u57fa\u6570\u3002\u6b64\u5916\uff0c\u6211\u4eec\u63a2\u7d22\u4e86\u5c5e\u6027\u72ec\u7acb\u6027\u5047\u8bbe\uff0c\u8be5\u5047\u8bbe\u53ef\u80fd\u5bfc\u81f4\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u4e2d\u7684\u663e\u7740\u9ad8\u4f30\u800c\u4e0d\u662f\u4f4e\u4f30\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd dominating join path correlation discovery \u7b97\u6cd5\uff0c\u4ee5\u7a81\u51fa\u548c\u7ba1\u7406\u8fde\u63a5\u952e\u548c\u8fc7\u6ee4\u8c13\u8bcd\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u6211\u4eec\u5728\u6d41\u884c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fdb\u884c\u7684\u5927\u91cf\u5b9e\u9a8c\u8868\u660e\uff0c\u4e0e SOTA \u65b9\u6cd5\u76f8\u6bd4\uff0cTKHist \u5c06\u8bef\u5dee\u65b9\u5dee\u964d\u4f4e\u4e86 2-3 \u4e2a\u6570\u91cf\u7ea7\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u76f8\u5f53\u6216\u66f4\u4f4e\u7684\u5185\u5b58\u4f7f\u7528\u7387\u3002"}}
{"id": "2510.15445", "pdf": "https://arxiv.org/pdf/2510.15445", "abs": "https://arxiv.org/abs/2510.15445", "authors": ["Gregory", "Weintraub"], "title": "Optimizing Data Lakes' Queries", "categories": ["cs.DB"], "comment": null, "summary": "Cloud data lakes provide a modern solution for managing large volumes of\ndata. The fundamental principle behind these systems is the separation of\ncompute and storage layers. In this architecture, inexpensive cloud storage is\nutilized for data storage, while compute engines are employed to perform\nanalytics on this data in an \"on-demand\" mode. However, to execute any\ncalculations on the data, it must be transferred from the storage layer to the\ncompute layer over the network for each query. This transfer can negatively\nimpact calculation performance and requires significant network bandwidth. In\nthis thesis, we examine various strategies to enhance query performance within\na cloud data lake architecture. We begin by formalizing the problem and\nproposing a straightforward yet robust theoretical framework that clearly\noutlines the associated trade-offs. Central to our framework is the concept of\na \"query coverage set,\" which is defined as the collection of files that need\nto be accessed from storage to fulfill a specific query. Our objective is to\nidentify the minimal coverage set for each query and execute the query\nexclusively on this subset of files. This approach enables us to significantly\nimprove query performance.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.15413", "pdf": "https://arxiv.org/pdf/2510.15413", "abs": "https://arxiv.org/abs/2510.15413", "authors": ["Po-Yu Tseng", "Po-Chu Hsu", "Shih-Wei Liao"], "title": "FHE-SQL: Fully Homomorphic Encrypted SQL Database", "categories": ["cs.CR", "cs.DB"], "comment": "12 pages, 1 figures, Keywords: Fully Homomorphic Encryption, Private\n  Information Retrieval, Encrypted Databases, Privacy-Preserving Systems", "summary": "FHE-SQL is a privacy-preserving database system that enables secure query\nprocessing on encrypted data using Fully Homomorphic Encryption (FHE),\nproviding privacy guaranties where an untrusted server can execute encrypted\nqueries without learning either the query contents or the underlying data.\nUnlike property-preserving encryption-based systems such as CryptDB, which rely\non deterministic or order-preserving encryption and are vulnerable to\nfrequency, order, and equality-pattern inference attacks, FHE-SQL performs\ncomputations entirely under encryption, eliminating these leakage channels.\nCompared to trusted-hardware approaches such as TrustedDB, which depend on a\nhardware security module and thus inherit its trust and side-channel\nlimitations, our design achieves end-to-end cryptographic protection without\nrequiring trusted execution environments. In contrast to high-performance\nFHE-based engines-Hermes, which target specialized workloads such as vector\nsearch, FHE-SQL supports general SQL query semantics with schema-aware,\ntype-safe definitions suitable for relational data management. FHE-SQL\nmitigates the high cost of ciphertext space by using an indirection\narchitecture that separates metadata in RocksDB from large ciphertexts in blob\nstorage. It supports oblivious selection via homomorphic boolean masks,\nmulti-tier caching, and garbage collection, with security proven under the\nUniversal Composability framework.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.15485", "pdf": "https://arxiv.org/pdf/2510.15485", "abs": "https://arxiv.org/abs/2510.15485", "authors": ["D\u0101vis Ka\u017eemaks", "Laurens Versluis", "Burcu Kulahcioglu Ozkan", "J\u00e9r\u00e9mie Decouchant"], "title": "Balancing Fairness and Performance in Multi-User Spark Workloads with Dynamic Scheduling (extended version)", "categories": ["cs.DC", "cs.DB", "cs.SY", "eess.SY"], "comment": "This paper is an extended version of a paper accepted at the ACM\n  Symposium on Cloud Computing (SoCC'25) that contains a proof of correctness", "summary": "Apache Spark is a widely adopted framework for large-scale data processing.\nHowever, in industrial analytics environments, Spark's built-in schedulers,\nsuch as FIFO and fair scheduling, struggle to maintain both user-level fairness\nand low mean response time, particularly in long-running shared applications.\nExisting solutions typically focus on job-level fairness which unintentionally\nfavors users who submit more jobs. Although Spark offers a built-in fair\nscheduler, it lacks adaptability to dynamic user workloads and may degrade\noverall job performance. We present the User Weighted Fair Queuing (UWFQ)\nscheduler, designed to minimize job response times while ensuring equitable\nresource distribution across users and their respective jobs. UWFQ simulates a\nvirtual fair queuing system and schedules jobs based on their estimated finish\ntimes under a bounded fairness model. To further address task skew and reduce\npriority inversions, which are common in Spark workloads, we introduce runtime\npartitioning, a method that dynamically refines task granularity based on\nexpected runtime. We implement UWFQ within the Spark framework and evaluate its\nperformance using multi-user synthetic workloads and Google cluster traces. We\nshow that UWFQ reduces the average response time of small jobs by up to 74%\ncompared to existing built-in Spark schedulers and to state-of-the-art fair\nscheduling algorithms.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u6237\u52a0\u6743\u516c\u5e73\u961f\u5217\uff08UWFQ\uff09\u8c03\u5ea6\u5668\uff0c\u65e8\u5728\u6700\u5c0f\u5316\u4f5c\u4e1a\u54cd\u5e94\u65f6\u95f4\uff0c\u540c\u65f6\u786e\u4fdd\u8de8\u7528\u6237\u53ca\u5176\u5404\u81ea\u4f5c\u4e1a\u7684\u516c\u5e73\u8d44\u6e90\u5206\u914d\u3002", "motivation": "\u5728\u5de5\u4e1a\u5206\u6790\u73af\u5883\u4e2d\uff0cSpark\u7684\u5185\u7f6e\u8c03\u5ea6\u5668\u96be\u4ee5\u7ef4\u6301\u7528\u6237\u7ea7\u522b\u7684\u516c\u5e73\u6027\u548c\u4f4e\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\uff0c\u7279\u522b\u662f\u5728\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u5171\u4eab\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002", "method": "UWFQ\u6a21\u62df\u4e86\u4e00\u4e2a\u865a\u62df\u516c\u5e73\u961f\u5217\u7cfb\u7edf\uff0c\u5e76\u6839\u636e\u5728\u6709\u754c\u516c\u5e73\u6a21\u578b\u4e0b\u4f30\u8ba1\u7684\u5b8c\u6210\u65f6\u95f4\u6765\u8c03\u5ea6\u4f5c\u4e1a\uff1b\u5f15\u5165\u8fd0\u884c\u65f6\u5206\u533a\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e\u9884\u671f\u8fd0\u884c\u65f6\u52a8\u6001\u7ec6\u5316\u4efb\u52a1\u7c92\u5ea6\u7684\u65b9\u6cd5\u3002", "result": "UWFQ\u4e0e\u73b0\u6709\u7684\u5185\u7f6eSpark\u8c03\u5ea6\u5668\u548c\u6700\u5148\u8fdb\u7684\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u76f8\u6bd4\uff0cUWFQ\u5c06\u5c0f\u578b\u4f5c\u4e1a\u7684\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u51cf\u5c11\u4e86\u9ad8\u8fbe74%\u3002", "conclusion": "UWFQ\u8c03\u5ea6\u5668\u80fd\u591f\u6709\u6548\u51cf\u5c11\u4f5c\u4e1a\u54cd\u5e94\u65f6\u95f4\uff0c\u5e76\u786e\u4fdd\u7528\u6237\u4e4b\u95f4\u7684\u516c\u5e73\u8d44\u6e90\u5206\u914d\u3002", "summary_zh": "Apache Spark\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u91c7\u7528\u7684\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u6846\u67b6\u3002\u7136\u800c\uff0c\u5728\u5de5\u4e1a\u5206\u6790\u73af\u5883\u4e2d\uff0cSpark\u7684\u5185\u7f6e\u8c03\u5ea6\u5668\uff08\u5982FIFO\u548c\u516c\u5e73\u8c03\u5ea6\uff09\u96be\u4ee5\u7ef4\u6301\u7528\u6237\u7ea7\u522b\u7684\u516c\u5e73\u6027\u548c\u4f4e\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\uff0c\u7279\u522b\u662f\u5728\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u5171\u4eab\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u73b0\u6709\u7684\u89e3\u51b3\u65b9\u6848\u901a\u5e38\u4fa7\u91cd\u4e8e\u4f5c\u4e1a\u7ea7\u522b\u7684\u516c\u5e73\u6027\uff0c\u4f46\u8fd9\u4f1a\u65e0\u610f\u4e2d\u504f\u8892\u63d0\u4ea4\u66f4\u591a\u4f5c\u4e1a\u7684\u7528\u6237\u3002\u867d\u7136Spark\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u516c\u5e73\u8c03\u5ea6\u5668\uff0c\u4f46\u5b83\u7f3a\u4e4f\u5bf9\u52a8\u6001\u7528\u6237\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9002\u5e94\u6027\uff0c\u5e76\u53ef\u80fd\u964d\u4f4e\u6574\u4f53\u4f5c\u4e1a\u6027\u80fd\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u7528\u6237\u52a0\u6743\u516c\u5e73\u961f\u5217\uff08UWFQ\uff09\u8c03\u5ea6\u5668\uff0c\u65e8\u5728\u6700\u5c0f\u5316\u4f5c\u4e1a\u54cd\u5e94\u65f6\u95f4\uff0c\u540c\u65f6\u786e\u4fdd\u8de8\u7528\u6237\u53ca\u5176\u5404\u81ea\u4f5c\u4e1a\u7684\u516c\u5e73\u8d44\u6e90\u5206\u914d\u3002UWFQ\u6a21\u62df\u4e86\u4e00\u4e2a\u865a\u62df\u516c\u5e73\u961f\u5217\u7cfb\u7edf\uff0c\u5e76\u6839\u636e\u5728\u6709\u754c\u516c\u5e73\u6a21\u578b\u4e0b\u4f30\u8ba1\u7684\u5b8c\u6210\u65f6\u95f4\u6765\u8c03\u5ea6\u4f5c\u4e1a\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u89e3\u51b3\u4efb\u52a1\u503e\u659c\u5e76\u51cf\u5c11Spark\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u5e38\u89c1\u7684\u4f18\u5148\u7ea7\u53cd\u8f6c\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u8fd0\u884c\u65f6\u5206\u533a\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e\u9884\u671f\u8fd0\u884c\u65f6\u52a8\u6001\u7ec6\u5316\u4efb\u52a1\u7c92\u5ea6\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728Spark\u6846\u67b6\u5185\u5b9e\u73b0\u4e86UWFQ\uff0c\u5e76\u4f7f\u7528\u591a\u7528\u6237\u5408\u6210\u5de5\u4f5c\u8d1f\u8f7d\u548cGoogle\u96c6\u7fa4\u8ddf\u8e2a\u8bc4\u4f30\u4e86\u5176\u6027\u80fd\u3002\u6211\u4eec\u8868\u660e\uff0c\u4e0e\u73b0\u6709\u7684\u5185\u7f6eSpark\u8c03\u5ea6\u5668\u548c\u6700\u5148\u8fdb\u7684\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u76f8\u6bd4\uff0cUWFQ\u5c06\u5c0f\u578b\u4f5c\u4e1a\u7684\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u51cf\u5c11\u4e86\u9ad8\u8fbe74%\u3002"}}
{"id": "2510.15560", "pdf": "https://arxiv.org/pdf/2510.15560", "abs": "https://arxiv.org/abs/2510.15560", "authors": ["Jiayuan Bai", "Xuan-guang Pan", "Chongyang Tao", "Shuai Ma"], "title": "JudgeSQL: Reasoning over SQL Candidates with Weighted Consensus Tournament", "categories": ["cs.AI", "cs.DB"], "comment": "13 pages", "summary": "Text-to-SQL is a pivotal task that bridges natural language understanding and\nstructured data access, yet it remains fundamentally challenging due to\nsemantic ambiguity and complex compositional reasoning. While large language\nmodels (LLMs) have greatly advanced SQL generation though prompting, supervised\nfinetuning and reinforced tuning, the shift toward test-time scaling exposes a\nnew bottleneck: selecting the correct query from a diverse candidate pool.\nExisting selection approaches, such as self-consistency or best-of-$N$\ndecoding, provide only shallow signals, making them prone to inconsistent\nscoring, fragile reasoning chains, and a failure to capture fine-grained\nsemantic distinctions between closely related SQL candidates. To this end, we\nintroduce JudgeSQL, a principled framework that redefines SQL candidate\nselection through structured reasoning and weighted consensus tournament\nmechanism. JudgeSQL develops a reasoning-based SQL judge model that distills\nreasoning traces with reinforcement learning guided by verifiable rewards,\nenabling accurate and interpretable judgments. Building on this, a weighted\nconsensus tournament integrates explicit reasoning preferences with implicit\ngenerator confidence, yielding selections that are both more reliable and more\nefficient. Extensive experiments on the BIRD benchmark demonstrate that\nJudgeSQL exhibits superior SQL judgment capabilities and good cross-scale\ngeneralization and robustness to generator capacity.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.15727", "pdf": "https://arxiv.org/pdf/2510.15727", "abs": "https://arxiv.org/abs/2510.15727", "authors": ["Sai Yashwant", "Anurag Dubey", "Praneeth Paikray", "Gantala Thulsiram"], "title": "Invoice Information Extraction: Methods and Performance Evaluation", "categories": ["cs.AI", "cs.DB"], "comment": null, "summary": "This paper presents methods for extracting structured information from\ninvoice documents and proposes a set of evaluation metrics (EM) to assess the\naccuracy of the extracted data against annotated ground truth. The approach\ninvolves pre-processing scanned or digital invoices, applying Docling and\nLlamaCloud Services to identify and extract key fields such as invoice number,\ndate, total amount, and vendor details. To ensure the reliability of the\nextraction process, we establish a robust evaluation framework comprising\nfield-level precision, consistency check failures, and exact match accuracy.\nThe proposed metrics provide a standardized way to compare different extraction\nmethods and highlight strengths and weaknesses in field-specific performance.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
