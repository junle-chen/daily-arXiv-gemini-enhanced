{"id": "2506.18951", "pdf": "https://arxiv.org/pdf/2506.18951", "abs": "https://arxiv.org/abs/2506.18951", "authors": ["Jinyang Li", "Xiaolong Li", "Ge Qu", "Per Jacobsson", "Bowen Qin", "Binyuan Hui", "Shuzheng Si", "Nan Huo", "Xiaohan Xu", "Yue Zhang", "Ziwei Tang", "Yuanshuai Li", "Florensia Widjaja", "Xintong Zhu", "Feige Zhou", "Yongfeng Huang", "Yannis Papakonstantinou", "Fatma Ozcan", "Chenhao Ma", "Reynold Cheng"], "title": "SWE-SQL: Illuminating LLM Pathways to Solve User SQL Issues in Real-World Applications", "categories": ["cs.DB", "cs.AI"], "comment": "26 pages, 9 figures", "summary": "Resolution of complex SQL issues persists as a significant bottleneck in\nreal-world database applications. Current Large Language Models (LLMs), while\nadept at text-to-SQL translation, have not been rigorously evaluated on the\nmore challenging task of debugging SQL issues. To address this gap, we\nintroduce BIRD-CRITIC, a new SQL issue debugging benchmark comprising 530\nPostgreSQL tasks (BIRD-CRITIC-PG) and 570 multi-dialect tasks\n(BIRD-CRITIC-Multi), distilled from authentic user issues and replayed within\nnew environments to facilitate rigorous evaluation. Baseline evaluations\nunderscore the task's complexity, with the leading reasoning model O3-Mini\nachieving only 38.87% success rate on BIRD-CRITIC-PG and 33.33% on\nBIRD-CRITIC-Multi. Meanwhile, advancing open-source models for database tasks\nis crucial for empowering local development while safeguarding data privacy.\nTherefore, we present Six-Gym (Sql-fIX-Gym), a training environment for\nelevating open-source model capabilities for SQL issue debugging. This\nenvironment leverages SQL-Rewind strategy, which automatically generates\nexecutable issue-solution datasets by reverse-engineering issues from verified\nSQLs. However, popular trajectory-based fine-tuning methods do not explore\nsubstantial supervisory signals. We further propose f-Plan Boosting, which\nextracts high-level debugging plans from SQL solutions, enabling teacher LLMs\nto produce 73.7% more successful trajectories for training. We integrate these\ncomponents into an open-source agent, Bird-Fixer. Based on Qwen-2.5-Coder-14B,\nBird-Fixer achieves 38.11% success rate on BIRD-CRITIC-PG and 29.65% on\nBIRD-CRITIC-Multi, surpassing leading proprietary models such as\nClaude-3.7-Sonnet and GPT-4.1, marking a significant step toward democratizing\nsophisticated SQL-debugging capabilities. The leaderboard and source code are\navailable: https://bird-critic.github.io/"}
{"id": "2506.19661", "pdf": "https://arxiv.org/pdf/2506.19661", "abs": "https://arxiv.org/abs/2506.19661", "authors": ["Maciej Besta", "Shriram Chandran", "Jakub Cudak", "Patrick Iff", "Marcin Copik", "Robert Gerstenberger", "Tomasz Szydlo", "J\u00fcrgen M\u00fcller", "Torsten Hoefler"], "title": "Higher-Order Graph Databases", "categories": ["cs.DB", "cs.IR", "cs.LG", "cs.SI"], "comment": null, "summary": "Recent advances in graph databases (GDBs) have been driving interest in\nlarge-scale analytics, yet current systems fail to support higher-order (HO)\ninteractions beyond first-order (one-hop) relations, which are crucial for\ntasks such as subgraph counting, polyadic modeling, and HO graph learning. We\naddress this by introducing a new class of systems, higher-order graph\ndatabases (HO-GDBs) that use lifting and lowering paradigms to seamlessly\nextend traditional GDBs with HO. We provide a theoretical analysis of OLTP and\nOLAP queries, ensuring correctness, scalability, and ACID compliance. We\nimplement a lightweight, modular, and parallelizable HO-GDB prototype that\noffers native support for hypergraphs, node-tuples, subgraphs, and other HO\nstructures under a unified API. The prototype scales to large HO OLTP & OLAP\nworkloads and shows how HO improves analytical tasks, for example enhancing\naccuracy of graph neural networks within a GDB by 44%. Our work ensures low\nlatency and high query throughput, and generalizes both ACID-compliant and\neventually consistent systems."}
{"id": "2506.18916", "pdf": "https://arxiv.org/pdf/2506.18916", "abs": "https://arxiv.org/abs/2506.18916", "authors": ["Ganesh Parab", "Zishan Ahmad", "Dagnachew Birru"], "title": "HI-SQL: Optimizing Text-to-SQL Systems through Dynamic Hint Integration", "categories": ["cs.LG", "cs.DB"], "comment": null, "summary": "Text-to-SQL generation bridges the gap between natural language and\ndatabases, enabling users to query data without requiring SQL expertise. While\nlarge language models (LLMs) have significantly advanced the field, challenges\nremain in handling complex queries that involve multi-table joins, nested\nconditions, and intricate operations. Existing methods often rely on multi-step\npipelines that incur high computational costs, increase latency, and are prone\nto error propagation. To address these limitations, we propose HI-SQL, a\npipeline that incorporates a novel hint generation mechanism utilizing\nhistorical query logs to guide SQL generation. By analyzing prior queries, our\nmethod generates contextual hints that focus on handling the complexities of\nmulti-table and nested operations. These hints are seamlessly integrated into\nthe SQL generation process, eliminating the need for costly multi-step\napproaches and reducing reliance on human-crafted prompts. Experimental\nevaluations on multiple benchmark datasets demonstrate that our approach\nsignificantly improves query accuracy of LLM-generated queries while ensuring\nefficiency in terms of LLM calls and latency, offering a robust and practical\nsolution for enhancing Text-to-SQL systems."}
