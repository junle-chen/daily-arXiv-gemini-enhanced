{"id": "2509.15346", "pdf": "https://arxiv.org/pdf/2509.15346", "abs": "https://arxiv.org/abs/2509.15346", "authors": ["Humam Kourani", "Gyunam Park", "Wil M. P. van der Aalst"], "title": "Revealing Inherent Concurrency in Event Data: A Partial Order Approach to Process Discovery", "categories": ["cs.DB"], "comment": "The Version of Record of this contribution will be published in the\n  proceedings of the 1st International Workshop on Stochastics, Uncertainty and\n  Non-Determinism in Process Mining (SUN-PM). This preprint has not undergone\n  peer review or any post-submission improvements or corrections", "summary": "Process discovery algorithms traditionally linearize events, failing to\ncapture the inherent concurrency of real-world processes. While some techniques\ncan handle partially ordered data, they often struggle with scalability on\nlarge event logs. We introduce a novel, scalable algorithm that directly\nleverages partial orders in process discovery. Our approach derives partially\nordered traces from event data and aggregates them into a\nsound-by-construction, perfectly fitting process model. Our hierarchical\nalgorithm preserves inherent concurrency while systematically abstracting\nexclusive choices and loop patterns, enhancing model compactness and precision.\nWe have implemented our technique and demonstrated its applicability on complex\nreal-life event logs. Our work contributes a scalable solution for a more\nfaithful representation of process behavior, especially when concurrency is\nprevalent in event data.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u8fc7\u7a0b\u53d1\u73b0\u4e2d\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u4ece\u800c\u66f4\u771f\u5b9e\u5730\u8868\u793a\u8fc7\u7a0b\u884c\u4e3a\uff0c\u5c24\u5176\u662f\u5728\u4e8b\u4ef6\u6570\u636e\u4e2d\u666e\u904d\u5b58\u5728\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\u3002", "motivation": "\u4f20\u7edf\u7684\u8fc7\u7a0b\u53d1\u73b0\u7b97\u6cd5\u901a\u5e38\u7ebf\u6027\u5316\u4e8b\u4ef6\uff0c\u65e0\u6cd5\u6355\u83b7\u73b0\u5b9e\u4e16\u754c\u8fc7\u7a0b\u4e2d\u56fa\u6709\u7684\u5e76\u53d1\u6027\u3002\u867d\u7136\u6709\u4e9b\u6280\u672f\u53ef\u4ee5\u5904\u7406\u90e8\u5206\u6392\u5e8f\u7684\u6570\u636e\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u96be\u4ee5\u5728\u5927\u89c4\u6a21\u4e8b\u4ef6\u65e5\u5fd7\u4e0a\u6269\u5c55\u3002", "method": "\u8be5\u65b9\u6cd5\u4ece\u4e8b\u4ef6\u6570\u636e\u4e2d\u5bfc\u51fa\u90e8\u5206\u6392\u5e8f\u7684\u8f68\u8ff9\uff0c\u5e76\u5c06\u5b83\u4eec\u805a\u5408\u6210\u4e00\u4e2asound-by-construction\u3001\u5b8c\u5168\u62df\u5408\u7684\u8fc7\u7a0b\u6a21\u578b\u3002\u8be5\u5206\u5c42\u7b97\u6cd5\u4fdd\u7559\u4e86\u56fa\u6709\u7684\u5e76\u53d1\u6027\uff0c\u540c\u65f6\u7cfb\u7edf\u5730\u62bd\u8c61\u4e86\u4e92\u65a5\u9009\u62e9\u548c\u5faa\u73af\u6a21\u5f0f\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u6a21\u578b\u7684\u7d27\u51d1\u6027\u548c\u7cbe\u786e\u6027\u3002", "result": "\u8be5\u6280\u672f\u5df2\u5f97\u5230\u5b9e\u65bd\uff0c\u5e76\u5728\u590d\u6742\u7684\u5b9e\u9645\u4e8b\u4ef6\u65e5\u5fd7\u4e2d\u8bc1\u660e\u4e86\u5176\u9002\u7528\u6027\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u4e3a\u8fc7\u7a0b\u884c\u4e3a\u7684\u66f4\u771f\u5b9e\u8868\u793a\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c24\u5176\u662f\u5728\u4e8b\u4ef6\u6570\u636e\u4e2d\u5e76\u53d1\u666e\u904d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u3002", "summary_zh": "\u8fc7\u7a0b\u53d1\u73b0\u7b97\u6cd5\u901a\u5e38\u5c06\u4e8b\u4ef6\u7ebf\u6027\u5316\uff0c\u65e0\u6cd5\u6355\u6349\u73b0\u5b9e\u4e16\u754c\u8fc7\u7a0b\u4e2d\u56fa\u6709\u7684\u5e76\u53d1\u6027\u3002\u867d\u7136\u6709\u4e9b\u6280\u672f\u53ef\u4ee5\u5904\u7406\u90e8\u5206\u6392\u5e8f\u7684\u6570\u636e\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u96be\u4ee5\u5728\u5927\u89c4\u6a21\u4e8b\u4ef6\u65e5\u5fd7\u4e0a\u6269\u5c55\u3002\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u53ef\u6269\u5c55\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u76f4\u63a5\u5229\u7528\u8fc7\u7a0b\u53d1\u73b0\u4e2d\u7684\u504f\u5e8f\u5173\u7cfb\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u4ece\u4e8b\u4ef6\u6570\u636e\u4e2d\u5bfc\u51fa\u90e8\u5206\u6392\u5e8f\u7684\u8f68\u8ff9\uff0c\u5e76\u5c06\u5b83\u4eec\u805a\u5408\u6210\u4e00\u4e2a\u6784\u5efa\u5408\u7406\u7684\u3001\u5b8c\u7f8e\u62df\u5408\u7684\u8fc7\u7a0b\u6a21\u578b\u3002\u6211\u4eec\u7684\u5206\u5c42\u7b97\u6cd5\u4fdd\u7559\u4e86\u56fa\u6709\u7684\u5e76\u53d1\u6027\uff0c\u540c\u65f6\u7cfb\u7edf\u5730\u62bd\u8c61\u4e86\u4e92\u65a5\u9009\u62e9\u548c\u5faa\u73af\u6a21\u5f0f\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u6a21\u578b\u7684\u7d27\u51d1\u6027\u548c\u7cbe\u786e\u6027\u3002\u6211\u4eec\u5df2\u7ecf\u5b9e\u65bd\u4e86\u8be5\u6280\u672f\uff0c\u5e76\u5728\u590d\u6742\u7684\u5b9e\u9645\u4e8b\u4ef6\u65e5\u5fd7\u4e2d\u8bc1\u660e\u4e86\u5176\u9002\u7528\u6027\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u4e3a\u8fc7\u7a0b\u884c\u4e3a\u7684\u66f4\u771f\u5b9e\u8868\u793a\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c24\u5176\u662f\u5728\u4e8b\u4ef6\u6570\u636e\u4e2d\u5e76\u53d1\u666e\u904d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u3002"}}
{"id": "2509.15529", "pdf": "https://arxiv.org/pdf/2509.15529", "abs": "https://arxiv.org/abs/2509.15529", "authors": ["Mashkhal A. Sidiq", "Aras A. Salih", "Samrand M. Hassan"], "title": "Optimization techniques for SQL+ML queries: A performance analysis of real-time feature computation in OpenMLDB", "categories": ["cs.DB"], "comment": "12 pages, 4 figures, 1 Table", "summary": "In this study, we optimize SQL+ML queries on top of OpenMLDB, an open-source\ndatabase that seamlessly integrates offline and online feature computations.\nThe work used feature-rich synthetic dataset experiments in Docker, which acted\nlike production environments that processed 100 to 500 records per batch and 6\nto 12 requests per batch in parallel. Efforts have been concentrated in the\nareas of better query plans, cached execution plans, parallel processing, and\nresource management. The experimental results show that OpenMLDB can support\napproximately 12,500 QPS with less than 1 ms latency, outperforming SparkSQL\nand ClickHouse by a factor of 23 and PostgreSQL and MySQL by 3.57 times. This\nstudy assessed the impact of optimization and showed that query plan\noptimization accounted for 35% of the performance gains, caching for 25%, and\nparallel processing for 20%. These results illustrate OpenMLDB's capability for\ntime-sensitive ML use cases, such as fraud detection, personalized\nrecommendation, and time series forecasting. The system's modular optimization\nframework, which combines batch and stream processing without interference,\ncontributes to its significant performance gain over traditional database\nsystems, particularly in applications that require real-time feature\ncomputation and serving. This study contributes to the understanding and design\nof high-performance SQL+ML systems and highlights the need for specialized SQL\noptimization for ML workloads.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2509.15732", "pdf": "https://arxiv.org/pdf/2509.15732", "abs": "https://arxiv.org/abs/2509.15732", "authors": ["Qingfeng Zhou", "Wensheng Gan", "Guoting Chen"], "title": "Discovering Top-k Periodic and High-Utility Patterns", "categories": ["cs.DB"], "comment": "Applied Intelligence. 5 figures, 14 tables", "summary": "With a user-specified minimum utility threshold (minutil), periodic\nhigh-utility pattern mining (PHUPM) aims to identify high-utility patterns that\noccur periodically in a transaction database. A pattern is deemed periodic if\nits period aligns with the periodicity constraint set by the user. However,\nusers may not be interested in all periodic high-utility patterns (PHUPs).\nMoreover, setting minutil in advance is also a challenging issue. To address\nthese issues, our research introduces an algorithm called TPU for extracting\nthe most significant top-k periodic and high-utility patterns that may or may\nnot include negative utility values. This TPU algorithm utilizes positive and\nnegative utility lists (PNUL) and period-estimated utility co-occurrence\nstructure (PEUCS) to store pertinent itemset information. It incorporates the\nperiodic real item utility (PIU), periodic co-occurrence utility descending\n(PCUD), and periodic real utility (PRU) threshold-raising strategies to elevate\nthe thresholds rapidly. By using the proposed threshold-raising strategies, the\nruntime was reduced by approximately 5\\% on the datasets used in the\nexperiments. Specifically, the runtime was reduced by up to 50\\% on the\nmushroom\\_negative and kosarak\\_negative datasets, and by up to 10\\% on the\nchess\\_negative dataset. Memory consumption was reduced by about 2\\%, with the\nlargest reduction of about 30\\% observed on the mushroom\\_negative dataset.\nThrough extensive experiments, we have demonstrated that our algorithm can\naccurately and effectively extract the top-k periodic high-utility patterns.\nThis paper successfully addresses the top-k mining issue and contributes to\ndata science.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2509.15755", "pdf": "https://arxiv.org/pdf/2509.15755", "abs": "https://arxiv.org/abs/2509.15755", "authors": ["Qingfeng Zhou", "Wensheng Gan", "Zhenlian Qi", "Philip S. Yu"], "title": "Utility-based Privacy Preserving Data Mining", "categories": ["cs.DB"], "comment": "IEEE IoT Journal. 16 figures, 12 tables", "summary": "With the advent of big data, periodic pattern mining has demonstrated\nsignificant value in real-world applications, including smart home systems,\nhealthcare systems, and the medical field. However, advances in network\ntechnology have enabled malicious actors to extract sensitive information from\npublicly available datasets, posing significant threats to data providers and,\nin severe cases, hindering societal development. To mitigate such risks,\nprivacy-preserving utility mining (PPUM) has been proposed. However, PPUM is\nunsuitable for addressing privacy concerns in periodic information mining. To\naddress this issue, we innovatively extend the existing PPUM framework and\npropose two algorithms, Maximum sensitive Utility-MAximum maxPer item (MU-MAP)\nand Maximum sensitive Utility-MInimum maxPer item (MU-MIP). These algorithms\naim to hide sensitive periodic high-utility itemsets while generating sanitized\ndatasets. To enhance the efficiency of the algorithms, we designed two novel\ndata structures: the Sensitive Itemset List (SISL) and the Sensitive Item List\n(SIL), which store essential information about sensitive itemsets and their\nconstituent items. Moreover, several performance metrics were employed to\nevaluate the performance of our algorithms compared to the state-of-the-art\nPPUM algorithms. The experimental results show that our proposed algorithms\nachieve an Artificial Cost (AC) value of 0 on all datasets when hiding\nsensitive itemsets. In contrast, the traditional PPUM algorithm yields non-zero\nAC. This indicates that our algorithms can successfully hide sensitive periodic\nitemsets without introducing misleading patterns, whereas the PPUM algorithm\ngenerates additional itemsets that may interfere with user decision-making.\nMoreover, the results also reveal that our algorithms maintain Database Utility\nSimilarity (DUS) of over 90\\% after the sensitive itemsets are hidden.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2509.16194", "pdf": "https://arxiv.org/pdf/2509.16194", "abs": "https://arxiv.org/abs/2509.16194", "authors": ["Vaishali Surianarayanan", "Neeraj Kumar", "Stavros Sintos"], "title": "Clustering with Set Outliers and Applications in Relational Clustering", "categories": ["cs.DS", "cs.DB"], "comment": null, "summary": "We introduce and study the $k$-center clustering problem with set outliers, a\nnatural and practical generalization of the classical $k$-center clustering\nwith outliers. Instead of removing individual data points, our model allows\ndiscarding up to $z$ subsets from a given family of candidate outlier sets\n$\\mathcal{H}$. Given a metric space $(P,\\mathsf{dist})$, where $P$ is a set of\nelements and $\\mathsf{dist}$ a distance metric, a family of sets\n$\\mathcal{H}\\subseteq 2^P$, and parameters $k, z$, the goal is to compute a set\nof $k$ centers $S\\subseteq P$ and a family of $z$ sets $H\\subseteq \\mathcal{H}$\nto minimize $\\max_{p\\in P\\setminus(\\bigcup_{h\\in H} h)} \\min_{s\\in\nS}\\mathsf{dist}(p,s)$. This abstraction captures structured noise common in\ndatabase applications, such as faulty data sources or corrupted records in data\nintegration and sensor systems.\n  We present the first approximation algorithms for this problem in both\ngeneral and geometric settings. Our methods provide tri-criteria\napproximations: selecting up to $2k$ centers and $2f z$ outlier sets (where $f$\nis the maximum number of sets that a point belongs to), while achieving\n$O(1)$-approximation in clustering cost. In geometric settings, we leverage\nrange and BBD trees to achieve near-linear time algorithms. In many real\napplications $f=1$. In this case we further improve the running time of our\nalgorithms by constructing small \\emph{coresets}. We also provide a hardness\nresult for the general problem showing that it is unlikely to get any sublinear\napproximation on the clustering cost selecting less than $f\\cdot z$ outlier\nsets.\n  We demonstrate that this model naturally captures relational clustering with\noutliers: outliers are input tuples whose removal affects the join output. We\nprovide approximation algorithms for both, establishing a tight connection\nbetween robust clustering and relational query evaluation.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
