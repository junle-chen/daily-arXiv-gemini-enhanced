{"id": "2510.09646", "pdf": "https://arxiv.org/pdf/2510.09646", "abs": "https://arxiv.org/abs/2510.09646", "authors": ["Ritesh Chandra", "Sonali Agarwal", "Navjot Singh"], "title": "Real-Time Health Analytics Using Ontology-Driven Complex Event Processing and LLM Reasoning: A Tuberculosis Case Study", "categories": ["cs.DB", "cs.AI"], "comment": "14 table. 20 figure", "summary": "Timely detection of critical health conditions remains a major challenge in\npublic health analytics, especially in Big Data environments characterized by\nhigh volume, rapid velocity, and diverse variety of clinical data. This study\npresents an ontology-enabled real-time analytics framework that integrates\nComplex Event Processing (CEP) and Large Language Models (LLMs) to enable\nintelligent health event detection and semantic reasoning over heterogeneous,\nhigh-velocity health data streams. The architecture leverages the Basic Formal\nOntology (BFO) and Semantic Web Rule Language (SWRL) to model diagnostic rules\nand domain knowledge. Patient data is ingested and processed using Apache Kafka\nand Spark Streaming, where CEP engines detect clinically significant event\npatterns. LLMs support adaptive reasoning, event interpretation, and ontology\nrefinement. Clinical information is semantically structured as Resource\nDescription Framework (RDF) triples in Graph DB, enabling SPARQL-based querying\nand knowledge-driven decision support. The framework is evaluated using a\ndataset of 1,000 Tuberculosis (TB) patients as a use case, demonstrating\nlow-latency event detection, scalable reasoning, and high model performance (in\nterms of precision, recall, and F1-score). These results validate the system's\npotential for generalizable, real-time health analytics in complex Big Data\nscenarios.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u672c\u4f53\u7684\u5b9e\u65f6\u5206\u6790\u6846\u67b6\uff0c\u96c6\u6210\u4e86\u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff08CEP\uff09\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\uff0c\u7528\u4e8e\u5728\u5f02\u6784\u3001\u9ad8\u901f\u7684\u5065\u5eb7\u6570\u636e\u6d41\u4e0a\u5b9e\u73b0\u667a\u80fd\u5065\u5eb7\u4e8b\u4ef6\u68c0\u6d4b\u548c\u8bed\u4e49\u63a8\u7406\u3002", "motivation": "\u5728\u5927\u6570\u636e\u73af\u5883\u4e0b\uff0c\u516c\u5171\u536b\u751f\u5206\u6790\u9762\u4e34\u7740\u53ca\u65f6\u68c0\u6d4b\u5173\u952e\u5065\u5eb7\u72b6\u51b5\u7684\u6311\u6218\uff0c\u7279\u522b\u662f\u4e34\u5e8a\u6570\u636e\u91cf\u5927\u3001\u901f\u5ea6\u5feb\u3001\u79cd\u7c7b\u7e41\u591a\u3002", "method": "\u8be5\u6846\u67b6\u5229\u7528\u57fa\u672c\u5f62\u5f0f\u672c\u4f53\uff08BFO\uff09\u548c\u8bed\u4e49Web\u89c4\u5219\u8bed\u8a00\uff08SWRL\uff09\u6765\u5efa\u6a21\u8bca\u65ad\u89c4\u5219\u548c\u9886\u57df\u77e5\u8bc6\uff0c\u4f7f\u7528Apache Kafka\u548cSpark Streaming\u6444\u53d6\u548c\u5904\u7406\u60a3\u8005\u6570\u636e\uff0cCEP\u5f15\u64ce\u68c0\u6d4b\u4e34\u5e8a\u663e\u8457\u7684\u4e8b\u4ef6\u6a21\u5f0f\uff0cLLM\u652f\u6301\u81ea\u9002\u5e94\u63a8\u7406\u3001\u4e8b\u4ef6\u89e3\u91ca\u548c\u672c\u4f53\u6539\u8fdb\uff0c\u4e34\u5e8a\u4fe1\u606f\u4ee5\u8d44\u6e90\u63cf\u8ff0\u6846\u67b6\uff08RDF\uff09\u4e09\u5143\u7ec4\u7684\u5f62\u5f0f\u5728\u56fe\u6570\u636e\u5e93\u4e2d\u8fdb\u884c\u8bed\u4e49\u7ed3\u6784\u5316\u3002", "result": "\u4f7f\u75281000\u540d\u7ed3\u6838\u75c5\uff08TB\uff09\u60a3\u8005\u7684\u6570\u636e\u96c6\u8fdb\u884c\u8bc4\u4f30\uff0c\u7ed3\u679c\u8868\u660e\u8be5\u7cfb\u7edf\u5177\u6709\u4f4e\u5ef6\u8fdf\u4e8b\u4ef6\u68c0\u6d4b\u3001\u53ef\u6269\u5c55\u63a8\u7406\u548c\u9ad8\u6a21\u578b\u6027\u80fd\uff08\u5728\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u5206\u6570\u65b9\u9762\uff09\u3002", "conclusion": "\u8be5\u7814\u7a76\u9a8c\u8bc1\u4e86\u8be5\u7cfb\u7edf\u5728\u590d\u6742\u5927\u6570\u636e\u573a\u666f\u4e2d\u8fdb\u884c\u901a\u7528\u3001\u5b9e\u65f6\u5065\u5eb7\u5206\u6790\u7684\u6f5c\u529b\u3002", "summary_zh": "\u672c\u7814\u7a76\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u672c\u4f53\u7684\u5b9e\u65f6\u5206\u6790\u6846\u67b6\uff0c\u8be5\u6846\u67b6\u96c6\u6210\u4e86\u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff08CEP\uff09\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\uff0c\u65e8\u5728\u5b9e\u73b0\u5bf9\u5f02\u6784\u3001\u9ad8\u901f\u5065\u5eb7\u6570\u636e\u6d41\u7684\u667a\u80fd\u5065\u5eb7\u4e8b\u4ef6\u68c0\u6d4b\u548c\u8bed\u4e49\u63a8\u7406\u3002\u8be5\u67b6\u6784\u5229\u7528\u57fa\u672c\u5f62\u5f0f\u672c\u4f53\uff08BFO\uff09\u548c\u8bed\u4e49Web\u89c4\u5219\u8bed\u8a00\uff08SWRL\uff09\u6765\u5efa\u6a21\u8bca\u65ad\u89c4\u5219\u548c\u9886\u57df\u77e5\u8bc6\u3002\u60a3\u8005\u6570\u636e\u901a\u8fc7Apache Kafka\u548cSpark Streaming\u8fdb\u884c\u6444\u53d6\u548c\u5904\u7406\uff0c\u5176\u4e2dCEP\u5f15\u64ce\u68c0\u6d4b\u4e34\u5e8a\u4e0a\u91cd\u8981\u7684\u4e8b\u4ef6\u6a21\u5f0f\u3002\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u652f\u6301\u81ea\u9002\u5e94\u63a8\u7406\u3001\u4e8b\u4ef6\u89e3\u91ca\u548c\u672c\u4f53\u5b8c\u5584\u3002\u4e34\u5e8a\u4fe1\u606f\u4ee5\u8d44\u6e90\u63cf\u8ff0\u6846\u67b6\uff08RDF\uff09\u4e09\u5143\u7ec4\u7684\u5f62\u5f0f\u5728\u56fe\u6570\u636e\u5e93\u4e2d\u8fdb\u884c\u8bed\u4e49\u7ed3\u6784\u5316\uff0c\u4ece\u800c\u652f\u6301\u57fa\u4e8eSPARQL\u7684\u67e5\u8be2\u548c\u77e5\u8bc6\u9a71\u52a8\u7684\u51b3\u7b56\u652f\u6301\u3002\u8be5\u6846\u67b6\u4f7f\u7528\u5305\u542b1000\u540d\u7ed3\u6838\u75c5\uff08TB\uff09\u60a3\u8005\u7684\u6570\u636e\u96c6\u8fdb\u884c\u8bc4\u4f30\uff0c\u7ed3\u679c\u8868\u660e\u8be5\u7cfb\u7edf\u5177\u6709\u4f4e\u5ef6\u8fdf\u4e8b\u4ef6\u68c0\u6d4b\u3001\u53ef\u6269\u5c55\u7684\u63a8\u7406\u80fd\u529b\u548c\u8f83\u9ad8\u7684\u6a21\u578b\u6027\u80fd\uff08\u5728\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u503c\u65b9\u9762\uff09\u3002\u8fd9\u4e9b\u7ed3\u679c\u9a8c\u8bc1\u4e86\u8be5\u7cfb\u7edf\u5728\u590d\u6742\u7684\u5927\u6570\u636e\u573a\u666f\u4e2d\u8fdb\u884c\u901a\u7528\u3001\u5b9e\u65f6\u5065\u5eb7\u5206\u6790\u7684\u6f5c\u529b\u3002"}}
{"id": "2510.10115", "pdf": "https://arxiv.org/pdf/2510.10115", "abs": "https://arxiv.org/abs/2510.10115", "authors": ["Kai Cao", "Yucong Duan", "Wensheng Gan"], "title": "Targeted Sequential Pattern Mining with High Average Utility", "categories": ["cs.DB"], "comment": "preprint, 9 figures, 3 tables", "summary": "Incorporating utility into targeted pattern mining can address the practical\nlimitations of traditional frequency-based approaches. However, utility-based\nmethods often suffer from generating a large number of long and complicated\nsequences. To improve pattern relevance and interpretability, average utility\nprovides a more balanced metric by considering both utility and sequence\nlength. Moreover, incorporating user-defined query targets into the mining\nprocess enhances usability and interactivity by retaining only patterns\ncontaining user-specified goals. To address challenges related to mining\nefficiency in large-scale, long-sequence datasets, this study introduces\naverage utility into targeted sequential pattern mining. A novel algorithm,\nTAUSQ-PG, is designed to find targeted high average utility sequential\npatterns. It incorporates efficient filtering and pruning strategies, tighter\nupper bound models, as well as novel specialized evaluation metrics and query\nflags tailored to this task. Extensive comparative experiments on different\ndatasets demonstrate that TAUSQ-PG effectively controls the candidate set size,\nthereby reducing redundant sequence generation and significantly improving\nruntime and memory efficiency.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5TAUSQ-PG\uff0c\u7528\u4e8e\u6316\u6398\u76ee\u6807\u9ad8\u5e73\u5747\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\uff0c\u5e76\u5728\u6548\u7387\u65b9\u9762\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u4f20\u7edf\u57fa\u4e8e\u9891\u7387\u7684\u6a21\u5f0f\u6316\u6398\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\uff0c\u800c\u57fa\u4e8e\u6548\u7528\u7684\u65b9\u6cd5\u5bb9\u6613\u4ea7\u751f\u5927\u91cf\u590d\u6742\u5e8f\u5217\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u66f4\u5e73\u8861\u7684\u6307\u6807\u548c\u7528\u6237\u4ea4\u4e92\u6765\u63d0\u9ad8\u6a21\u5f0f\u7684\u76f8\u5173\u6027\u548c\u53ef\u89e3\u91ca\u6027\u3002", "method": "\u63d0\u51faTAUSQ-PG\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u7ed3\u5408\u4e86\u9ad8\u6548\u7684\u8fc7\u6ee4\u548c\u526a\u679d\u7b56\u7565\u3001\u66f4\u4e25\u683c\u7684\u4e0a\u9650\u6a21\u578b\u4ee5\u53ca\u4e13\u95e8\u7684\u8bc4\u4f30\u6307\u6807\u548c\u67e5\u8be2\u6807\u5fd7\u3002", "result": "\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0a\u7684\u5927\u91cf\u5bf9\u6bd4\u5b9e\u9a8c\u8868\u660e\uff0cTAUSQ-PG\u7b97\u6cd5\u80fd\u6709\u6548\u63a7\u5236\u5019\u9009\u96c6\u5927\u5c0f\uff0c\u51cf\u5c11\u5197\u4f59\u5e8f\u5217\u751f\u6210\uff0c\u663e\u8457\u63d0\u9ad8\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6548\u7387\u3002", "conclusion": "TAUSQ-PG\u7b97\u6cd5\u5728\u6316\u6398\u76ee\u6807\u9ad8\u5e73\u5747\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u65b9\u9762\u5177\u6709\u4f18\u52bf\uff0c\u80fd\u591f\u6709\u6548\u63d0\u9ad8\u6316\u6398\u6548\u7387\u548c\u6a21\u5f0f\u8d28\u91cf\u3002", "summary_zh": "\u5c06\u6548\u7528\u6027\u7eb3\u5165\u76ee\u6807\u6a21\u5f0f\u6316\u6398\u53ef\u4ee5\u89e3\u51b3\u4f20\u7edf\u57fa\u4e8e\u9891\u7387\u7684\u65b9\u6cd5\u7684\u5b9e\u9645\u5c40\u9650\u6027\u3002\u7136\u800c\uff0c\u57fa\u4e8e\u6548\u7528\u7684\u65b9\u6cd5\u901a\u5e38\u4f1a\u4ea7\u751f\u5927\u91cf\u5197\u957f\u800c\u590d\u6742\u7684\u5e8f\u5217\u3002\u4e3a\u4e86\u63d0\u9ad8\u6a21\u5f0f\u7684\u76f8\u5173\u6027\u548c\u53ef\u89e3\u91ca\u6027\uff0c\u5e73\u5747\u6548\u7528\u901a\u8fc7\u540c\u65f6\u8003\u8651\u6548\u7528\u548c\u5e8f\u5217\u957f\u5ea6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u5e73\u8861\u7684\u6307\u6807\u3002\u6b64\u5916\uff0c\u5c06\u7528\u6237\u5b9a\u4e49\u7684\u67e5\u8be2\u76ee\u6807\u7eb3\u5165\u6316\u6398\u8fc7\u7a0b\uff0c\u901a\u8fc7\u4ec5\u4fdd\u7559\u5305\u542b\u7528\u6237\u6307\u5b9a\u76ee\u6807\u7684\u6a21\u5f0f\uff0c\u589e\u5f3a\u4e86\u53ef\u7528\u6027\u548c\u4ea4\u4e92\u6027\u3002\u4e3a\u4e86\u5e94\u5bf9\u5927\u89c4\u6a21\u3001\u957f\u5e8f\u5217\u6570\u636e\u96c6\u4e2d\u4e0e\u6316\u6398\u6548\u7387\u76f8\u5173\u7684\u6311\u6218\uff0c\u672c\u7814\u7a76\u5c06\u5e73\u5747\u6548\u7528\u5f15\u5165\u5230\u76ee\u6807\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\u4e2d\u3002\u8bbe\u8ba1\u4e86\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5TAUSQ-PG\uff0c\u7528\u4e8e\u67e5\u627e\u76ee\u6807\u9ad8\u5e73\u5747\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u3002\u5b83\u7ed3\u5408\u4e86\u9ad8\u6548\u7684\u8fc7\u6ee4\u548c\u526a\u679d\u7b56\u7565\u3001\u66f4\u4e25\u683c\u7684\u4e0a\u9650\u6a21\u578b\uff0c\u4ee5\u53ca\u4e3a\u8be5\u4efb\u52a1\u91cf\u8eab\u5b9a\u5236\u7684\u65b0\u7684\u4e13\u7528\u8bc4\u4f30\u6307\u6807\u548c\u67e5\u8be2\u6807\u5fd7\u3002\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u7684\u5927\u91cf\u5bf9\u6bd4\u5b9e\u9a8c\u8868\u660e\uff0cTAUSQ-PG\u6709\u6548\u5730\u63a7\u5236\u4e86\u5019\u9009\u96c6\u5927\u5c0f\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u5197\u4f59\u5e8f\u5217\u7684\u751f\u6210\uff0c\u5e76\u663e\u8457\u63d0\u9ad8\u4e86\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6548\u7387\u3002"}}
{"id": "2510.10123", "pdf": "https://arxiv.org/pdf/2510.10123", "abs": "https://arxiv.org/abs/2510.10123", "authors": ["Joydeep Chandra", "Satyam Kumar Navneet", "Yong Zhang"], "title": "The Hybrid Multimodal Graph Index (HMGI): A Comprehensive Framework for Integrated Relational and Vector Search", "categories": ["cs.DB", "cs.LG"], "comment": null, "summary": "The proliferation of complex, multimodal datasets has exposed a critical gap\nbetween the capabilities of specialized vector databases and traditional graph\ndatabases. While vector databases excel at semantic similarity search, they\nlack the capacity for deep relational querying. Conversely, graph databases\nmaster complex traversals but are not natively optimized for high-dimensional\nvector search. This paper introduces the Hybrid Multimodal Graph Index (HMGI),\na novel framework designed to bridge this gap by creating a unified system for\nefficient, hybrid queries on multimodal data. HMGI leverages the native graph\ndatabase architecture and integrated vector search capabilities, exemplified by\nplatforms like Neo4j, to combine Approximate Nearest Neighbor Search (ANNS)\nwith expressive graph traversal queries. Key innovations of the HMGI framework\ninclude modality-aware partitioning of embeddings to optimize index structure\nand query performance, and a system for adaptive, low-overhead index updates to\nsupport dynamic data ingestion, drawing inspiration from the architectural\nprinciples of systems like TigerVector. By integrating semantic similarity\nsearch directly with relational context, HMGI aims to outperform pure vector\ndatabases like Milvus in complex, relationship-heavy query scenarios and\nachieve sub-linear query times for hybrid tasks.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u6df7\u5408\u591a\u6a21\u56fe\u7d22\u5f15\uff08HMGI\uff09\uff0c\u4e00\u4e2a\u7528\u4e8e\u591a\u6a21\u6570\u636e\u9ad8\u6548\u6df7\u5408\u67e5\u8be2\u7684\u7edf\u4e00\u6846\u67b6\u3002", "motivation": "\u73b0\u6709\u7684\u5411\u91cf\u6570\u636e\u5e93\u548c\u56fe\u6570\u636e\u5e93\u5728\u5904\u7406\u590d\u6742\u591a\u6a21\u6570\u636e\u96c6\u65f6\u5b58\u5728\u5c40\u9650\u6027\uff1a\u5411\u91cf\u6570\u636e\u5e93\u64c5\u957f\u8bed\u4e49\u76f8\u4f3c\u5ea6\u641c\u7d22\uff0c\u4f46\u7f3a\u4e4f\u6df1\u5ea6\u5173\u7cfb\u67e5\u8be2\u80fd\u529b\uff1b\u56fe\u6570\u636e\u5e93\u64c5\u957f\u590d\u6742\u904d\u5386\uff0c\u4f46\u672a\u9488\u5bf9\u9ad8\u7ef4\u5411\u91cf\u641c\u7d22\u8fdb\u884c\u4f18\u5316\u3002", "method": "\u672c\u6587\u63d0\u51fa\u7684HMGI\u6846\u67b6\uff0c\u5229\u7528\u539f\u751f\u56fe\u6570\u636e\u5e93\u67b6\u6784\u548c\u96c6\u6210\u7684\u5411\u91cf\u641c\u7d22\u80fd\u529b\uff08\u5982Neo4j\uff09\uff0c\u7ed3\u5408\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\uff08ANNS\uff09\u4e0e\u8868\u8fbe\u6027\u56fe\u904d\u5386\u67e5\u8be2\u3002\u5173\u952e\u521b\u65b0\u5305\u62ec\uff1a\u6a21\u6001\u611f\u77e5\u7684\u5d4c\u5165\u5206\u533a\u4ee5\u4f18\u5316\u7d22\u5f15\u7ed3\u6784\u548c\u67e5\u8be2\u6027\u80fd\uff1b\u4ee5\u53ca\u4e00\u4e2a\u81ea\u9002\u5e94\u3001\u4f4e\u5f00\u9500\u7684\u7d22\u5f15\u66f4\u65b0\u7cfb\u7edf\uff0c\u4ee5\u652f\u6301\u52a8\u6001\u6570\u636e\u6444\u53d6\u3002", "result": "HMGI\u65e8\u5728\u590d\u6742\u3001\u5173\u7cfb\u5bc6\u96c6\u7684\u67e5\u8be2\u573a\u666f\u4e2d\u4f18\u4e8e\u7eaf\u5411\u91cf\u6570\u636e\u5e93\uff08\u5982Milvus\uff09\uff0c\u5e76\u5b9e\u73b0\u6df7\u5408\u4efb\u52a1\u7684\u4e9a\u7ebf\u6027\u67e5\u8be2\u65f6\u95f4\u3002", "conclusion": "HMGI\u901a\u8fc7\u5c06\u8bed\u4e49\u76f8\u4f3c\u5ea6\u641c\u7d22\u4e0e\u5173\u7cfb\u4e0a\u4e0b\u6587\u76f4\u63a5\u96c6\u6210\uff0c\u5f25\u5408\u4e86\u5411\u91cf\u6570\u636e\u5e93\u548c\u56fe\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u4e3a\u591a\u6a21\u6570\u636e\u7684\u9ad8\u6548\u6df7\u5408\u67e5\u8be2\u63d0\u4f9b\u4e86\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u3002", "summary_zh": "\u590d\u6742\u591a\u6a21\u6570\u636e\u96c6\u7684\u6fc0\u589e\u66b4\u9732\u4e86\u4e13\u7528\u5411\u91cf\u6570\u636e\u5e93\u548c\u4f20\u7edf\u56fe\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4e00\u4e2a\u5173\u952e\u5dee\u8ddd\u3002\u867d\u7136\u5411\u91cf\u6570\u636e\u5e93\u64c5\u957f\u8bed\u4e49\u76f8\u4f3c\u5ea6\u641c\u7d22\uff0c\u4f46\u5b83\u4eec\u7f3a\u4e4f\u6df1\u5ea6\u5173\u7cfb\u67e5\u8be2\u7684\u80fd\u529b\u3002\u76f8\u53cd\uff0c\u56fe\u6570\u636e\u5e93\u64c5\u957f\u590d\u6742\u904d\u5386\uff0c\u4f46\u6ca1\u6709\u9488\u5bf9\u9ad8\u7ef4\u5411\u91cf\u641c\u7d22\u8fdb\u884c\u539f\u751f\u4f18\u5316\u3002\u672c\u6587\u4ecb\u7ecd\u4e86\u6df7\u5408\u591a\u6a21\u56fe\u7d22\u5f15\uff08HMGI\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u65e8\u5728\u901a\u8fc7\u4e3a\u591a\u6a21\u6570\u636e\u521b\u5efa\u9ad8\u6548\u3001\u6df7\u5408\u67e5\u8be2\u7684\u7edf\u4e00\u7cfb\u7edf\u6765\u5f25\u5408\u8fd9\u4e00\u5dee\u8ddd\u7684\u65b0\u9896\u6846\u67b6\u3002HMGI\u5229\u7528\u539f\u751f\u56fe\u6570\u636e\u5e93\u67b6\u6784\u548c\u96c6\u6210\u7684\u5411\u91cf\u641c\u7d22\u80fd\u529b\uff08\u4ee5Neo4j\u7b49\u5e73\u53f0\u4e3a\u4f8b\uff09\uff0c\u5c06\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\uff08ANNS\uff09\u4e0e\u8868\u8fbe\u6027\u56fe\u904d\u5386\u67e5\u8be2\u76f8\u7ed3\u5408\u3002HMGI\u6846\u67b6\u7684\u5173\u952e\u521b\u65b0\u5305\u62ec\uff1a\u6a21\u6001\u611f\u77e5\u7684\u5d4c\u5165\u5206\u533a\uff0c\u4ee5\u4f18\u5316\u7d22\u5f15\u7ed3\u6784\u548c\u67e5\u8be2\u6027\u80fd\uff1b\u4ee5\u53ca\u4e00\u4e2a\u81ea\u9002\u5e94\u3001\u4f4e\u5f00\u9500\u7684\u7d22\u5f15\u66f4\u65b0\u7cfb\u7edf\uff0c\u4ee5\u652f\u6301\u52a8\u6001\u6570\u636e\u6444\u53d6\uff0c\u5176\u7075\u611f\u6765\u81eaTigerVector\u7b49\u7cfb\u7edf\u7684\u67b6\u6784\u539f\u5219\u3002\u901a\u8fc7\u5c06\u8bed\u4e49\u76f8\u4f3c\u5ea6\u641c\u7d22\u76f4\u63a5\u4e0e\u5173\u7cfb\u4e0a\u4e0b\u6587\u96c6\u6210\uff0cHMGI\u65e8\u5728\u590d\u6742\u3001\u5173\u7cfb\u5bc6\u96c6\u7684\u67e5\u8be2\u573a\u666f\u4e2d\u4f18\u4e8e\u7eaf\u5411\u91cf\u6570\u636e\u5e93\uff08\u5982Milvus\uff09\uff0c\u5e76\u5b9e\u73b0\u6df7\u5408\u4efb\u52a1\u7684\u4e9a\u7ebf\u6027\u67e5\u8be2\u65f6\u95f4\u3002"}}
{"id": "2510.10243", "pdf": "https://arxiv.org/pdf/2510.10243", "abs": "https://arxiv.org/abs/2510.10243", "authors": ["Jian Zhu", "Zhidong Lin", "Wensheng Gan", "Ruichu Cai", "Zhifeng Hao", "Philip S. Yu"], "title": "Efficient Mining of Low-Utility Sequential Patterns", "categories": ["cs.DB"], "comment": "Preprint, 4 tables, 9 figures", "summary": "Discovering valuable insights from rich data is a crucial task for\nexploratory data analysis. Sequential pattern mining (SPM) has found widespread\napplications across various domains. In recent years, low-utility sequential\npattern mining (LUSPM) has shown strong potential in applications such as\nintrusion detection and genomic sequence analysis. However, existing research\nin utility-based SPM focuses on high-utility sequential patterns, and the\ndefinitions and strategies used in high-utility SPM cannot be directly applied\nto LUSPM. Moreover, no algorithms have yet been developed specifically for\nmining low-utility sequential patterns. To address these problems, we formalize\nthe LUSPM problem, redefine sequence utility, and introduce a compact data\nstructure called the sequence-utility chain to efficiently record utility\ninformation. Furthermore, we propose three novel algorithm--LUSPM_b, LUSPM_s,\nand LUSPM_e--to discover the complete set of low-utility sequential patterns.\nLUSPM_b serves as an exhaustive baseline, while LUSPM_s and LUSPM_e build upon\nit, generating subsequences through shrinkage and extension operations,\nrespectively. In addition, we introduce the maximal non-mutually contained\nsequence set and incorporate multiple pruning strategies, which significantly\nreduce redundant operations in both LUSPM_s and LUSPM_e. Finally, extensive\nexperimental results demonstrate that both LUSPM_s and LUSPM_e substantially\noutperform LUSPM_b and exhibit excellent scalability. Notably, LUSPM_e achieves\nsuperior efficiency, requiring less runtime and memory consumption than\nLUSPM_s. Our code is available at https://github.com/Zhidong-Lin/LUSPM.", "AI": {"tldr": "\u672c\u6587\u9488\u5bf9\u4f4e\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e09\u79cd\u7b97\u6cd5LUSPM_b\u3001LUSPM_s\u548cLUSPM_e\uff0c\u5e76\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\u4e86LUSPM_s\u548cLUSPM_e\u7684\u6709\u6548\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u6548\u7528\u7684\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\u7814\u7a76\u4e3b\u8981\u96c6\u4e2d\u5728\u9ad8\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u4e0a\uff0c\u800c\u9ad8\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u7684\u5b9a\u4e49\u548c\u7b56\u7565\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u4e8e\u4f4e\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u3002\u6b64\u5916\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u4e13\u95e8\u7528\u4e8e\u6316\u6398\u4f4e\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u7684\u7b97\u6cd5\u3002", "method": "\u672c\u6587\u5f62\u5f0f\u5316\u4e86LUSPM\u95ee\u9898\uff0c\u91cd\u65b0\u5b9a\u4e49\u4e86\u5e8f\u5217\u6548\u7528\uff0c\u5e76\u5f15\u5165\u4e86\u4e00\u79cd\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u79f0\u4e3a\u5e8f\u5217\u6548\u7528\u94fe\uff0c\u4ee5\u6709\u6548\u5730\u8bb0\u5f55\u6548\u7528\u4fe1\u606f\u3002\u6b64\u5916\uff0c\u672c\u6587\u63d0\u51fa\u4e86\u4e09\u79cd\u65b0\u7684\u7b97\u6cd5LUSPM_b\u3001LUSPM_s\u548cLUSPM_e\u6765\u53d1\u73b0\u5b8c\u6574\u7684\u4f4e\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u96c6\u3002LUSPM_b\u4f5c\u4e3a\u8be6\u5c3d\u7684\u57fa\u7ebf\uff0c\u800cLUSPM_s\u548cLUSPM_e\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5206\u522b\u901a\u8fc7\u6536\u7f29\u548c\u6269\u5c55\u64cd\u4f5c\u751f\u6210\u5b50\u5e8f\u5217\u3002\u6b64\u5916\uff0c\u672c\u6587\u8fd8\u4ecb\u7ecd\u4e86\u6700\u5927\u975e\u4e92\u5305\u542b\u5e8f\u5217\u96c6\uff0c\u5e76\u7ed3\u5408\u4e86\u591a\u79cd\u526a\u679d\u7b56\u7565\uff0c\u4ece\u800c\u663e\u8457\u51cf\u5c11\u4e86LUSPM_s\u548cLUSPM_e\u4e2d\u7684\u5197\u4f59\u64cd\u4f5c\u3002", "result": "\u5927\u91cf\u7684\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cLUSPM_s\u548cLUSPM_e\u7684\u6027\u80fd\u5747\u4f18\u4e8eLUSPM_b\uff0c\u5e76\u5177\u6709\u51fa\u8272\u7684\u53ef\u6269\u5c55\u6027\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cLUSPM_e\u5b9e\u73b0\u4e86\u5353\u8d8a\u7684\u6548\u7387\uff0c\u4e0eLUSPM_s\u76f8\u6bd4\uff0c\u9700\u8981\u66f4\u5c11\u7684\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017\u3002", "conclusion": "\u672c\u6587\u89e3\u51b3\u4e86\u4f4e\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\u95ee\u9898\uff0c\u63d0\u51fa\u7684LUSPM_s\u548cLUSPM_e\u7b97\u6cd5\u5177\u6709\u826f\u597d\u7684\u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\uff0cLUSPM_e\u7b97\u6cd5\u6548\u7387\u6700\u9ad8\u3002", "summary_zh": "\u4ece\u4e30\u5bcc\u7684\u6570\u636e\u4e2d\u53d1\u73b0\u6709\u4ef7\u503c\u7684\u89c1\u89e3\u662f\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u7684\u5173\u952e\u4efb\u52a1\u3002\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\uff08SPM\uff09\u5df2\u5728\u5404\u4e2a\u9886\u57df\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\u3002\u8fd1\u5e74\u6765\uff0c\u4f4e\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\uff08LUSPM\uff09\u5728\u5165\u4fb5\u68c0\u6d4b\u548c\u57fa\u56e0\u7ec4\u5e8f\u5217\u5206\u6790\u7b49\u5e94\u7528\u4e2d\u663e\u793a\u51fa\u5f3a\u5927\u7684\u6f5c\u529b\u3002\u7136\u800c\uff0c\u73b0\u6709\u57fa\u4e8e\u6548\u7528\u7684SPM\u7814\u7a76\u4e3b\u8981\u96c6\u4e2d\u5728\u9ad8\u6548\u7387\u7528\u5e8f\u5217\u6a21\u5f0f\u4e0a\uff0c\u5e76\u4e14\u9ad8\u6548\u7387\u7528SPM\u4e2d\u4f7f\u7528\u7684\u5b9a\u4e49\u548c\u7b56\u7565\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u4e8eLUSPM\u3002\u6b64\u5916\uff0c\u5c1a\u672a\u5f00\u53d1\u51fa\u4e13\u95e8\u7528\u4e8e\u6316\u6398\u4f4e\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u7684\u7b97\u6cd5\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u5f62\u5f0f\u5316\u4e86LUSPM\u95ee\u9898\uff0c\u91cd\u65b0\u5b9a\u4e49\u4e86\u5e8f\u5217\u6548\u7528\uff0c\u5e76\u5f15\u5165\u4e86\u4e00\u79cd\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u79f0\u4e3a\u5e8f\u5217\u6548\u7528\u94fe\uff0c\u4ee5\u6709\u6548\u5730\u8bb0\u5f55\u6548\u7528\u4fe1\u606f\u3002\u6b64\u5916\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e09\u79cd\u65b0\u7684\u7b97\u6cd5\u2014\u2014LUSPM_b\u3001LUSPM_s\u548cLUSPM_e\u2014\u2014\u6765\u53d1\u73b0\u5b8c\u6574\u7684\u4f4e\u6548\u7528\u5e8f\u5217\u6a21\u5f0f\u96c6\u3002LUSPM_b\u4f5c\u4e3a\u8be6\u5c3d\u7684\u57fa\u7ebf\uff0c\u800cLUSPM_s\u548cLUSPM_e\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5206\u522b\u901a\u8fc7\u6536\u7f29\u548c\u6269\u5c55\u64cd\u4f5c\u751f\u6210\u5b50\u5e8f\u5217\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u4ecb\u7ecd\u4e86\u6700\u5927\u975e\u4e92\u5305\u542b\u5e8f\u5217\u96c6\uff0c\u5e76\u7ed3\u5408\u4e86\u591a\u79cd\u526a\u679d\u7b56\u7565\uff0c\u4ece\u800c\u663e\u8457\u51cf\u5c11\u4e86LUSPM_s\u548cLUSPM_e\u4e2d\u7684\u5197\u4f59\u64cd\u4f5c\u3002\u6700\u540e\uff0c\u5927\u91cf\u7684\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cLUSPM_s\u548cLUSPM_e\u7684\u6027\u80fd\u5747\u5927\u5927\u4f18\u4e8eLUSPM_b\uff0c\u5e76\u5177\u6709\u51fa\u8272\u7684\u53ef\u6269\u5c55\u6027\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cLUSPM_e\u5b9e\u73b0\u4e86\u5353\u8d8a\u7684\u6548\u7387\uff0c\u4e0eLUSPM_s\u76f8\u6bd4\uff0c\u9700\u8981\u66f4\u5c11\u7684\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017\u3002\u6211\u4eec\u7684\u4ee3\u7801\u53ef\u5728https://github.com/Zhidong-Lin/LUSPM\u4e0a\u627e\u5230\u3002"}}
{"id": "2510.10348", "pdf": "https://arxiv.org/pdf/2510.10348", "abs": "https://arxiv.org/abs/2510.10348", "authors": ["Ling Zhang", "Shaleen Deep", "Jignesh M. Patel", "Karthikeyan Sankaralingam"], "title": "Regular Expression Indexing for Log Analysis. Extended Version", "categories": ["cs.DB"], "comment": null, "summary": "In this paper, we present the design and architecture of REI, a novel system\nfor indexing log data for regular expression queries. Our main contribution is\nan $n$-gram-based indexing strategy and an efficient storage mechanism that\nresults in a speedup of up to 14x compared to state-of-the-art regex processing\nengines that do not use indexing, using only 2.1% of extra space. We perform a\ndetailed study that analyzes the space usage of the index and the improvement\nin workload execution time, uncovering interesting insights. Specifically, we\nshow that even an optimized implementation of strategies such as inverted\nindexing, which are widely used in text processing libraries, may lead to\nsuboptimal performance for regex indexing on log analysis tasks. Overall, the\nREI approach presented in this paper provides a significant boost when\nevaluating regular expression queries on log data. REI is also modular and can\nwork with existing regular expression packages, making it easy to deploy in a\nvariety of settings. The code of REI is available at\nhttps://github.com/mush-zhang/REI-Regular-Expression-Indexing.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8en-gram\u7d22\u5f15\u7b56\u7565\u548c\u9ad8\u6548\u5b58\u50a8\u673a\u5236\u7684\u65e5\u5fd7\u6570\u636e\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u7cfb\u7edfREI\uff0c\u53ef\u5b9e\u73b0\u9ad8\u8fbe14\u500d\u7684\u52a0\u901f\u3002", "motivation": "\u8be5\u8bba\u6587\u65e8\u5728\u89e3\u51b3\u5728\u65e5\u5fd7\u6570\u636e\u4e0a\u8fdb\u884c\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u65f6\uff0c\u73b0\u6709\u6280\u672f\u5b58\u5728\u7684\u6548\u7387\u95ee\u9898\u3002", "method": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8en-gram\u7684\u7d22\u5f15\u7b56\u7565\u548c\u9ad8\u6548\u7684\u5b58\u50a8\u673a\u5236\uff0c\u7528\u4e8e\u7d22\u5f15\u65e5\u5fd7\u6570\u636e\u4ee5\u52a0\u901f\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cREI\u7cfb\u7edf\u76f8\u6bd4\u4e8e\u4e0d\u4f7f\u7528\u7d22\u5f15\u7684\u5148\u8fdb\u6b63\u5219\u8868\u8fbe\u5f0f\u5904\u7406\u5f15\u64ce\uff0c\u901f\u5ea6\u63d0\u5347\u9ad8\u8fbe14\u500d\uff0c\u4e14\u4ec5\u4f7f\u7528\u4e862.1%\u7684\u989d\u5916\u7a7a\u95f4\u3002", "conclusion": "\u672c\u6587\u63d0\u51fa\u7684REI\u65b9\u6cd5\u5728\u8bc4\u4f30\u65e5\u5fd7\u6570\u636e\u4e0a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u65f6\uff0c\u63d0\u4f9b\u4e86\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\uff0c\u5e76\u4e14REI\u5177\u6709\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u4e0e\u73b0\u6709\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5305\u4e00\u8d77\u4f7f\u7528\uff0c\u6613\u4e8e\u5728\u5404\u79cd\u73af\u5883\u4e2d\u90e8\u7f72\u3002", "summary_zh": "\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u540d\u4e3aREI\u7684\u65b0\u578b\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u7528\u4e8e\u7d22\u5f15\u65e5\u5fd7\u6570\u636e\u4ee5\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u3002\u6211\u4eec\u7684\u4e3b\u8981\u8d21\u732e\u662f\u4e00\u79cd\u57fa\u4e8en-gram\u7684\u7d22\u5f15\u7b56\u7565\u548c\u4e00\u79cd\u9ad8\u6548\u7684\u5b58\u50a8\u673a\u5236\uff0c\u4e0e\u4e0d\u4f7f\u7528\u7d22\u5f15\u7684\u6700\u65b0\u6b63\u5219\u8868\u8fbe\u5f0f\u5904\u7406\u5f15\u64ce\u76f8\u6bd4\uff0c\u901f\u5ea6\u63d0\u9ad8\u4e8614\u500d\uff0c\u4ec5\u4f7f\u7528\u4e862.1%\u7684\u989d\u5916\u7a7a\u95f4\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u7814\u7a76\uff0c\u5206\u6790\u4e86\u7d22\u5f15\u7684\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5\u548c\u5de5\u4f5c\u8d1f\u8f7d\u6267\u884c\u65f6\u95f4\u7684\u6539\u8fdb\uff0c\u63ed\u793a\u4e86\u6709\u8da3\u7684\u89c1\u89e3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8868\u660e\uff0c\u5373\u4f7f\u662f\u6587\u672c\u5904\u7406\u5e93\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5012\u6392\u7d22\u5f15\u7b49\u7b56\u7565\u7684\u4f18\u5316\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u65e5\u5fd7\u5206\u6790\u4efb\u52a1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7d22\u5f15\u7684\u6b21\u4f18\u6027\u80fd\u3002\u603b\u7684\u6765\u8bf4\uff0c\u672c\u6587\u63d0\u51fa\u7684REI\u65b9\u6cd5\u5728\u8bc4\u4f30\u65e5\u5fd7\u6570\u636e\u4e0a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\u65f6\uff0c\u63d0\u4f9b\u4e86\u663e\u8457\u7684\u63d0\u5347\u3002REI\u4e5f\u662f\u6a21\u5757\u5316\u7684\uff0c\u53ef\u4ee5\u4e0e\u73b0\u6709\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5305\u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u5176\u6613\u4e8e\u5728\u5404\u79cd\u73af\u5883\u4e2d\u90e8\u7f72\u3002REI\u7684\u4ee3\u7801\u53ef\u5728https://github.com/mush-zhang/REI-Regular-Expression-Indexing\u4e0a\u627e\u5230\u3002"}}
{"id": "2510.10580", "pdf": "https://arxiv.org/pdf/2510.10580", "abs": "https://arxiv.org/abs/2510.10580", "authors": ["Jiahao He", "Yutao Cui", "Cuiping Li", "Jikang Jiang", "Yuheng Hou", "Hong Chen"], "title": "AQORA: A Learned Adaptive Query Optimizer for Spark SQL", "categories": ["cs.DB"], "comment": "14 pages, 11 figures", "summary": "Recent studies have identified two main approaches to improve query\noptimization: learned query optimization (LQO), which generates or selects\nbetter query plans before execution based on models trained in advance, and\nadaptive query processing (AQP), which adapts the query plan during execution\nbased on statistical feedback collected at runtime. Although both approaches\nhave shown promise, they also face critical limitations. LQO must commit to a\nfixed plan without access to actual cardinalities and typically rely on a\nsingle end-to-end feedback signal, making learning inefficient. On the other\nhand, AQP depends heavily on rule-based heuristics and lacks the ability to\nlearn from experience. In this paper, we present AQORA, an adaptive query\noptimizer with a reinforcement learning architecture that combines the\nstrengths of both LQO and AQP. AQORA addresses the above challenges through\nfour core strategies: (1) realistic feature encoding, (2) query stage-level\nfeedback and intervention, (3) automatic strategy adaptation, and (4) low-cost\nintegration. Experiments show that AQORA reduces end-to-end execution time by\nup to 90% compared to other learned methods and by up to 70% compared to Spark\nSQL's default configuration with adaptive query execution.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.10858", "pdf": "https://arxiv.org/pdf/2510.10858", "abs": "https://arxiv.org/abs/2510.10858", "authors": ["Guanli Liu", "Renata Borovica-Gajic"], "title": "DriftBench: Defining and Generating Data and Query Workload Drift for Benchmarking", "categories": ["cs.DB"], "comment": null, "summary": "Data and workload drift are key to evaluating database components such as\ncaching, cardinality estimation, indexing, and query optimization. Yet,\nexisting benchmarks are static, offering little to no support for modeling\ndrift. This limitation stems from the lack of clear definitions and tools for\ngenerating data and workload drift. Motivated by this gap, we propose a unified\ntaxonomy for data and workload drift, grounded in observations from both\nacademia and industry. Building on this foundation, we introduce DriftBench, a\nlightweight and extensible framework for generating data and workload drift in\nbenchmark inputs. Together, the taxonomy and DriftBench provide a standardized\nvocabulary and mechanism for modeling and generating drift in benchmarking. We\ndemonstrate their effectiveness through case studies involving data drift,\nworkload drift, and drift-aware cardinality estimation.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.11011", "pdf": "https://arxiv.org/pdf/2510.11011", "abs": "https://arxiv.org/abs/2510.11011", "authors": ["Farzaneh Zirak", "Farhana Choudhury", "Renata Borovica-Gajic"], "title": "GrASP: A Generalizable Address-based Semantic Prefetcher for Scalable Transactional and Analytical Workloads", "categories": ["cs.DB", "cs.LG"], "comment": "This is a preprint version", "summary": "Data prefetching--loading data into the cache before it is requested--is\nessential for reducing I/O overhead and improving database performance. While\ntraditional prefetchers focus on sequential patterns, recent learning-based\napproaches, especially those leveraging data semantics, achieve higher accuracy\nfor complex access patterns. However, these methods often struggle with today's\ndynamic, ever-growing datasets and require frequent, timely fine-tuning.\nPrivacy constraints may also restrict access to complete datasets,\nnecessitating prefetchers that can learn effectively from samples. To address\nthese challenges, we present GrASP, a learning-based prefetcher designed for\nboth analytical and transactional workloads. GrASP enhances prefetching\naccuracy and scalability by leveraging logical block address deltas and\ncombining query representations with result encodings. It frames prefetching as\na context-aware multi-label classification task, using multi-layer LSTMs to\npredict delta patterns from embedded context. This delta modeling approach\nenables GrASP to generalize predictions from small samples to larger, dynamic\ndatasets without requiring extensive retraining. Experiments on real-world\ndatasets and industrial benchmarks demonstrate that GrASP generalizes to\ndatasets 250 times larger than the training data, achieving up to 45% higher\nhit ratios, 60% lower I/O time, and 55% lower end-to-end query execution\nlatency than existing baselines. On average, GrASP attains a 91.4% hit ratio, a\n90.8% I/O time reduction, and a 57.1% execution latency reduction.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.11166", "pdf": "https://arxiv.org/pdf/2510.11166", "abs": "https://arxiv.org/abs/2510.11166", "authors": ["Brad Bebee", "\u00dcmit V. \u00c7ataly\u00fcrek", "Olaf Hartig", "Ankesh Khandelwal", "Simone Rondelli", "Michael Schmidt", "Lefteris Sidirourgos", "Bryan Thompson"], "title": "Poseidon: A OneGraph Engine", "categories": ["cs.DB"], "comment": null, "summary": "We present the Poseidon engine behind the Neptune Analytics graph database\nservice. Customers interact with Poseidon using the declarative openCypher\nquery language, which enables requests that seamlessly combine traditional\nquerying paradigms (such as graph pattern matching, variable length paths,\naggregation) with algorithm invocations and has been syntactically extended to\nfacilitate OneGraph interoperability, such as the disambiguation between\nglobally unique IRIs (as exposed via RDF) vs. local identifiers (as encountered\nin LPG data). Poseidon supports a broad range of graph workloads, from simple\ntransactions, to top-k beam search algorithms on dynamic graphs, to whole graph\nanalytics requiring multiple full passes over the data. For example, real-time\nfraud detection, like many other use cases, needs to reflect current committed\nstate of the dynamic graph. If a users cell phone is compromised, then all\nnewer actions by that user become immediately suspect. To address such dynamic\ngraph use cases, Poseidon combines state-of-the-art transaction processing with\nnovel graph data indexing, including lock-free maintenance of adjacency lists,\nsecondary succinct indices, partitioned heaps for data tuple storage with\nuniform placement, and innovative statistics for cost-based query optimization.\nThe Poseidon engine uses a logical log for durability, enabling rapid evolution\nof in-memory data structures. Bulk data loads achieve more than 10 million\nproperty values per second on many data sets while simple transactions can\nexecute in under 20ms against the storage engine.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.10810", "pdf": "https://arxiv.org/pdf/2510.10810", "abs": "https://arxiv.org/abs/2510.10810", "authors": ["Omar Islam Laskar", "Fatemeh Ramezani Khozestani", "Ishika Nankani", "Sohrab Namazi Nia", "Senjuti Basu Roy", "Kaustubh Beedkar"], "title": "Aegis: A Correlation-Based Data Masking Advisor for Data Sharing Ecosystems", "categories": ["cs.LG", "cs.DB"], "comment": "Accepted at SIGMOD 2026", "summary": "Data-sharing ecosystems enable entities -- such as providers, consumers, and\nintermediaries -- to access, exchange, and utilize data for various downstream\ntasks and applications. Due to privacy concerns, data providers typically\nanonymize datasets before sharing them; however, the existence of multiple\nmasking configurations results in masked datasets with varying utility.\nConsequently, a key challenge lies in efficiently determining the optimal\nmasking configuration that maximizes a dataset's utility. This paper presents\nAEGIS, a middleware framework for identifying the optimal masking configuration\nfor machine learning datasets that consist of features and a class label. We\nintroduce a utility optimizer that minimizes predictive utility deviation -- a\nmetric based on the changes in feature-label correlations before and after\nmasking. Our framework leverages limited data summaries (such as 1D histograms)\nor none to estimate the feature-label joint distribution, making it suitable\nfor scenarios where raw data is inaccessible due to privacy restrictions. To\nachieve this, we propose a joint distribution estimator based on iterative\nproportional fitting, which allows supporting various feature-label correlation\nquantification methods such as g3, mutual information, or chi-square. Our\nexperimental evaluation on real-world datasets shows that AEGIS identifies\noptimal masking configurations over an order of magnitude faster, while the\nresulting masked datasets achieve predictive performance on downstream ML tasks\nthat is on par with baseline approaches.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.10885", "pdf": "https://arxiv.org/pdf/2510.10885", "abs": "https://arxiv.org/abs/2510.10885", "authors": ["Jiajing Guo", "Kenil Patel", "Jorge Piazentin Ono", "Wenbin He", "Liu Ren"], "title": "Rethinking Agentic Workflows: Evaluating Inference-Based Test-Time Scaling Strategies in Text2SQL Tasks", "categories": ["cs.CL", "cs.DB"], "comment": "Accepted at COLM 2025 SCALR Workshop", "summary": "Large language models (LLMs) are increasingly powering Text-to-SQL (Text2SQL)\nsystems, enabling non-expert users to query industrial databases using natural\nlanguage. While test-time scaling strategies have shown promise in LLM-based\nsolutions, their effectiveness in real-world applications, especially with the\nlatest reasoning models, remains uncertain. In this work, we benchmark six\nlightweight, industry-oriented test-time scaling strategies and four LLMs,\nincluding two reasoning models, evaluating their performance on the BIRD\nMini-Dev benchmark. Beyond standard accuracy metrics, we also report inference\nlatency and token consumption, providing insights relevant for practical system\ndeployment. Our findings reveal that Divide-and-Conquer prompting and few-shot\ndemonstrations consistently enhance performance for both general-purpose and\nreasoning-focused LLMs. However, introducing additional workflow steps yields\nmixed results, and base model selection plays a critical role. This work sheds\nlight on the practical trade-offs between accuracy, efficiency, and complexity\nwhen deploying Text2SQL systems.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.10942", "pdf": "https://arxiv.org/pdf/2510.10942", "abs": "https://arxiv.org/abs/2510.10942", "authors": ["Nilima Rao", "Jagriti Srivastava", "Pradeep Kumar Sharma", "Hritvik Shrivastava"], "title": "Scalable and Explainable Enterprise Knowledge Discovery Using Graph-Centric Hybrid Retrieval", "categories": ["cs.AI", "cs.DB"], "comment": null, "summary": "Modern enterprises manage vast knowledge distributed across heterogeneous\nsystems such as Jira, Git repositories, Confluence, and wikis. Conventional\nretrieval methods based on keyword search or static embeddings often fail to\nanswer complex queries that require contextual reasoning and multi-hop\ninference across artifacts. We present a modular hybrid retrieval framework for\nadaptive enterprise information access that integrates Knowledge Base\nLanguage-Augmented Models (KBLam), DeepGraph representations, and\nembedding-driven semantic search. The framework builds a unified knowledge\ngraph from parsed repositories including code, pull requests, and commit\nhistories, enabling semantic similarity search, structural inference, and\nmulti-hop reasoning. Query analysis dynamically determines the optimal\nretrieval strategy, supporting both structured and unstructured data sources\nthrough independent or fused processing. An interactive interface provides\ngraph visualizations, subgraph exploration, and context-aware query routing to\ngenerate concise and explainable answers. Experiments on large-scale Git\nrepositories show that the unified reasoning layer improves answer relevance by\nup to 80 percent compared with standalone GPT-based retrieval pipelines. By\ncombining graph construction, hybrid reasoning, and interactive visualization,\nthe proposed framework offers a scalable, explainable, and user-centric\nfoundation for intelligent knowledge assistants in enterprise environments.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.11299", "pdf": "https://arxiv.org/pdf/2510.11299", "abs": "https://arxiv.org/abs/2510.11299", "authors": ["Josep Domingo-Ferrer", "David S\u00e1nchez"], "title": "How to Get Actual Privacy and Utility from Privacy Models: the k-Anonymity and Differential Privacy Families", "categories": ["cs.CR", "cs.DB", "68", "K.4.1"], "comment": "13 pages", "summary": "Privacy models were introduced in privacy-preserving data publishing and\nstatistical disclosure control with the promise to end the need for costly\nempirical assessment of disclosure risk. We examine how well this promise is\nkept by the main privacy models. We find they may fail to provide adequate\nprotection guarantees because of problems in their definition or incur\nunacceptable trade-offs between privacy protection and utility preservation.\nSpecifically, k-anonymity may not entirely exclude disclosure if enforced with\ndeterministic mechanisms or without constraints on the confidential values. On\nthe other hand, differential privacy (DP) incurs unacceptable utility loss for\nsmall budgets and its privacy guarantee becomes meaningless for large budgets.\nIn the latter case, an ex post empirical assessment of disclosure risk becomes\nnecessary, undermining the main appeal of privacy models. Whereas the utility\npreservation of DP can only be improved by relaxing its privacy guarantees, we\nargue that a semantic reformulation of k-anonymity can offer more robust\nprivacy without losing utility with respect to traditional syntactic\nk-anonymity.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
