{"id": "2506.11298", "pdf": "https://arxiv.org/pdf/2506.11298", "abs": "https://arxiv.org/abs/2506.11298", "authors": ["Piotr Sowinski", "Karolina Bogacka", "Anastasiya Danilenka", "Nikita Kozlov"], "title": "Jelly: a fast and convenient RDF serialization format", "categories": ["cs.DB", "cs.NI"], "comment": null, "summary": "Existing RDF serialization formats such as Turtle, N-Triples, and JSON-LD are\nwidely used for communication and storage in knowledge graph and Semantic Web\napplications. However, they suffer from limitations in performance, compression\nratio, and lack of native support for RDF streams. To address these\nshortcomings, we introduce Jelly, a fast and convenient binary serialization\nformat for RDF data that supports both batch and streaming use cases. Jelly is\ndesigned to maximize serialization throughput, reduce file size with\nlightweight streaming compression, and minimize compute resource usage. Built\non Protocol Buffers, Jelly is easy to integrate with modern programming\nlanguages and RDF libraries. To maximize reusability, Jelly has an open\nprotocol specification, open-source implementations in Java and Python\nintegrated with popular RDF libraries, and a versatile command-line tool. To\nillustrate its usefulness, we outline concrete use cases where Jelly can\nprovide tangible benefits. By combining practical usability with\nstate-of-the-art efficiency, Jelly is an important contribution to the Semantic\nWeb tool stack.", "AI": {"tldr": "Jelly\u662f\u4e00\u79cd\u5feb\u901f\u3001\u4fbf\u6377\u7684RDF\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u652f\u6301\u6279\u91cf\u548c\u6d41\u5f0f\u7528\u4f8b\uff0c\u65e8\u5728\u63d0\u5347\u6027\u80fd\u548c\u538b\u7f29\u7387\u3002", "motivation": "\u73b0\u6709\u7684RDF\u5e8f\u5217\u5316\u683c\u5f0f\u5728\u6027\u80fd\u3001\u538b\u7f29\u7387\u548c\u5bf9RDF\u6d41\u7684\u672c\u5730\u652f\u6301\u65b9\u9762\u5b58\u5728\u5c40\u9650\u6027\u3002", "method": "Jelly\u57fa\u4e8eProtocol Buffers\uff0c\u6613\u4e8e\u4e0e\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u548cRDF\u5e93\u96c6\u6210\u3002", "result": "Jelly\u6700\u5927\u5316\u4e86\u5e8f\u5217\u5316\u541e\u5410\u91cf\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u6d41\u538b\u7f29\u51cf\u5c11\u4e86\u6587\u4ef6\u5927\u5c0f\uff0c\u5e76\u6700\u5c0f\u5316\u4e86\u8ba1\u7b97\u8d44\u6e90\u7684\u4f7f\u7528\u3002", "conclusion": "Jelly\u901a\u8fc7\u7ed3\u5408\u5b9e\u7528\u6027\u548c\u6548\u7387\uff0c\u4e3a\u8bed\u4e49\u7f51\u5de5\u5177\u6808\u505a\u51fa\u4e86\u91cd\u8981\u8d21\u732e\u3002", "summary_zh": "\u73b0\u6709\u7684RDF\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u5982Turtle\u3001N-Triples\u548cJSON-LD\uff0c\u88ab\u5e7f\u6cdb\u7528\u4e8e\u77e5\u8bc6\u56fe\u8c31\u548c\u8bed\u4e49\u7f51\u5e94\u7528\u4e2d\u7684\u901a\u4fe1\u548c\u5b58\u50a8\u3002\u7136\u800c\uff0c\u5b83\u4eec\u5728\u6027\u80fd\u3001\u538b\u7f29\u7387\u4ee5\u53ca\u7f3a\u4e4f\u5bf9RDF\u6d41\u7684\u672c\u5730\u652f\u6301\u65b9\u9762\u5b58\u5728\u5c40\u9650\u6027\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u7f3a\u70b9\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86Jelly\uff0c\u8fd9\u662f\u4e00\u79cd\u5feb\u901f\u4e14\u65b9\u4fbf\u7684RDF\u6570\u636e\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u652f\u6301\u6279\u91cf\u548c\u6d41\u5f0f\u7528\u4f8b\u3002Jelly\u65e8\u5728\u6700\u5927\u5316\u5e8f\u5217\u5316\u541e\u5410\u91cf\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u6d41\u538b\u7f29\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\uff0c\u5e76\u6700\u5c0f\u5316\u8ba1\u7b97\u8d44\u6e90\u7684\u4f7f\u7528\u3002Jelly\u6784\u5efa\u4e8eProtocol Buffers\u4e4b\u4e0a\uff0c\u6613\u4e8e\u4e0e\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u548cRDF\u5e93\u96c6\u6210\u3002\u4e3a\u4e86\u6700\u5927\u5316\u53ef\u91cd\u7528\u6027\uff0cJelly\u5177\u6709\u5f00\u653e\u7684\u534f\u8bae\u89c4\u8303\uff0c\u5728Java\u548cPython\u4e2d\u96c6\u6210\u4e86\u6d41\u884c\u7684RDF\u5e93\u7684\u5f00\u6e90\u5b9e\u73b0\uff0c\u4ee5\u53ca\u4e00\u4e2a\u901a\u7528\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002\u4e3a\u4e86\u8bf4\u660e\u5b83\u7684\u7528\u5904\uff0c\u6211\u4eec\u6982\u8ff0\u4e86Jelly\u53ef\u4ee5\u63d0\u4f9b\u5b9e\u9645\u5229\u76ca\u7684\u5177\u4f53\u7528\u4f8b\u3002\u901a\u8fc7\u7ed3\u5408\u5b9e\u7528\u6027\u4e0e\u6700\u5148\u8fdb\u7684\u6548\u7387\uff0cJelly\u662f\u5bf9\u8bed\u4e49\u7f51\u5de5\u5177\u6808\u7684\u91cd\u8981\u8d21\u732e\u3002"}}
{"id": "2506.11541", "pdf": "https://arxiv.org/pdf/2506.11541", "abs": "https://arxiv.org/abs/2506.11541", "authors": ["Aaron K\u00fcsters", "Wil M. P. van der Aalst"], "title": "OCPQ: Object-Centric Process Querying & Constraints", "categories": ["cs.DB"], "comment": null, "summary": "Process querying is used to extract information and insights from process\nexecution data. Similarly, process constraints can be checked against input\ndata, yielding information on which process instances violate them.\nTraditionally, such process mining techniques use case-centric event data as\ninput. However, with the uptake of Object-Centric Process Mining (OCPM),\nexisting querying and constraint checking techniques are no longer applicable.\nObject-Centric Event Data (OCED) removes the requirement to pick a single case\nnotion (i.e., requiring that events belong to exactly one case) and can thus\nrepresent many real-life processes much more accurately. In this paper, we\npresent a novel highly-expressive approach for object-centric process querying,\ncalled OCPQ. It supports a wide variety of applications, including OCED-based\nconstraint checking and filtering. The visual representation of nested queries\nin OCPQ allows users to intuitively read and create queries and constraints. We\nimplemented our approach using (1) a high-performance execution engine backend\nand (2) an easy-to-use editor frontend. Additionally, we evaluated our approach\non a real-life dataset, showing the lack in expressiveness of prior work and\nruntime performance significantly better than the general querying solutions\nSQLite and Neo4j, as well as comparable to the performance-focused DuckDB.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aOCPQ\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8fc7\u7a0b\u67e5\u8be2\u65b9\u6cd5\uff0c\u5b83\u5177\u6709\u9ad8\u8868\u73b0\u529b\uff0c\u5e76\u652f\u6301\u5404\u79cd\u5e94\u7528\uff0c\u5305\u62ec\u57fa\u4e8eOCED\u7684\u7ea6\u675f\u68c0\u67e5\u548c\u8fc7\u6ee4\u3002", "motivation": "\u4f20\u7edf\u7684\u6d41\u7a0b\u6316\u6398\u6280\u672f\u4f7f\u7528\u4ee5\u6848\u4f8b\u4e3a\u4e2d\u5fc3\u7684\u4e8b\u4ef6\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002\u7136\u800c\uff0c\u968f\u7740\u9762\u5411\u5bf9\u8c61\u7684\u8fc7\u7a0b\u6316\u6398\uff08OCPM\uff09\u7684\u5174\u8d77\uff0c\u73b0\u6709\u7684\u67e5\u8be2\u548c\u7ea6\u675f\u68c0\u67e5\u6280\u672f\u4e0d\u518d\u9002\u7528\u3002\u9762\u5411\u5bf9\u8c61\u7684\u4e8b\u4ef6\u6570\u636e\uff08OCED\uff09\u6d88\u9664\u4e86\u9009\u62e9\u5355\u4e2a\u6848\u4f8b\u6982\u5ff5\u7684\u8981\u6c42\uff08\u5373\uff0c\u8981\u6c42\u4e8b\u4ef6\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u6848\u4f8b\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u66f4\u51c6\u786e\u5730\u8868\u793a\u8bb8\u591a\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u6d41\u7a0b\u3002", "method": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u3001\u9ad8\u8868\u73b0\u529b\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8fc7\u7a0b\u67e5\u8be2\u65b9\u6cd5OCPQ\u3002", "result": "OCPQ\u652f\u6301\u5404\u79cd\u5e94\u7528\uff0c\u5305\u62ec\u57fa\u4e8eOCED\u7684\u7ea6\u675f\u68c0\u67e5\u548c\u8fc7\u6ee4\u3002\u5d4c\u5957\u67e5\u8be2\u7684\u53ef\u89c6\u5316\u8868\u793a\u5141\u8bb8\u7528\u6237\u76f4\u89c2\u5730\u8bfb\u53d6\u548c\u521b\u5efa\u67e5\u8be2\u548c\u7ea6\u675f\u3002\u6211\u4eec\u4f7f\u7528\uff081\uff09\u9ad8\u6027\u80fd\u6267\u884c\u5f15\u64ce\u540e\u7aef\u548c\uff082\uff09\u6613\u4e8e\u4f7f\u7528\u7684\u7f16\u8f91\u5668\u524d\u7aef\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\u3002", "conclusion": "OCPQ\u5728\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u7684\u8bc4\u4f30\u8868\u660e\uff0c\u5b83\u6bd4\u5148\u524d\u7684\u5de5\u4f5c\u66f4\u5177\u8868\u73b0\u529b\uff0c\u5e76\u4e14\u8fd0\u884c\u65f6\u6027\u80fd\u660e\u663e\u4f18\u4e8e\u901a\u7528\u67e5\u8be2\u89e3\u51b3\u65b9\u6848SQLite\u548cNeo4j\uff0c\u5e76\u4e14\u4e0e\u4ee5\u6027\u80fd\u4e3a\u4e2d\u5fc3\u7684DuckDB\u76f8\u5f53\u3002", "summary_zh": "\u6d41\u7a0b\u67e5\u8be2\u7528\u4e8e\u4ece\u6d41\u7a0b\u6267\u884c\u6570\u636e\u4e2d\u63d0\u53d6\u4fe1\u606f\u548c\u89c1\u89e3\u3002\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u9488\u5bf9\u8f93\u5165\u6570\u636e\u68c0\u67e5\u6d41\u7a0b\u7ea6\u675f\uff0c\u4ece\u800c\u4ea7\u751f\u5173\u4e8e\u54ea\u4e9b\u6d41\u7a0b\u5b9e\u4f8b\u8fdd\u53cd\u4e86\u5b83\u4eec\u7684\u4fe1\u606f\u3002\u4f20\u7edf\u4e0a\uff0c\u8fd9\u79cd\u6d41\u7a0b\u6316\u6398\u6280\u672f\u4f7f\u7528\u4ee5\u6848\u4f8b\u4e3a\u4e2d\u5fc3\u7684\u4e8b\u4ef6\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002\u7136\u800c\uff0c\u968f\u7740\u9762\u5411\u5bf9\u8c61\u7684\u8fc7\u7a0b\u6316\u6398\uff08OCPM\uff09\u7684\u5174\u8d77\uff0c\u73b0\u6709\u7684\u67e5\u8be2\u548c\u7ea6\u675f\u68c0\u67e5\u6280\u672f\u4e0d\u518d\u9002\u7528\u3002\u9762\u5411\u5bf9\u8c61\u7684\u4e8b\u4ef6\u6570\u636e\uff08OCED\uff09\u6d88\u9664\u4e86\u9009\u62e9\u5355\u4e2a\u6848\u4f8b\u6982\u5ff5\u7684\u8981\u6c42\uff08\u5373\uff0c\u8981\u6c42\u4e8b\u4ef6\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u6848\u4f8b\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u66f4\u51c6\u786e\u5730\u8868\u793a\u8bb8\u591a\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u6d41\u7a0b\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u3001\u9ad8\u8868\u73b0\u529b\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8fc7\u7a0b\u67e5\u8be2\u65b9\u6cd5\uff0c\u79f0\u4e3aOCPQ\u3002\u5b83\u652f\u6301\u5404\u79cd\u5e94\u7528\uff0c\u5305\u62ec\u57fa\u4e8eOCED\u7684\u7ea6\u675f\u68c0\u67e5\u548c\u8fc7\u6ee4\u3002\u5d4c\u5957\u67e5\u8be2\u5728OCPQ\u4e2d\u7684\u53ef\u89c6\u5316\u8868\u793a\u5141\u8bb8\u7528\u6237\u76f4\u89c2\u5730\u8bfb\u53d6\u548c\u521b\u5efa\u67e5\u8be2\u548c\u7ea6\u675f\u3002\u6211\u4eec\u4f7f\u7528\uff081\uff09\u9ad8\u6027\u80fd\u6267\u884c\u5f15\u64ce\u540e\u7aef\u548c\uff082\uff09\u6613\u4e8e\u4f7f\u7528\u7684\u7f16\u8f91\u5668\u524d\u7aef\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5728\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\uff0c\u8868\u660e\u5148\u524d\u7684\u5de5\u4f5c\u7f3a\u4e4f\u8868\u73b0\u529b\uff0c\u5e76\u4e14\u8fd0\u884c\u65f6\u6027\u80fd\u660e\u663e\u4f18\u4e8e\u901a\u7528\u67e5\u8be2\u89e3\u51b3\u65b9\u6848SQLite\u548cNeo4j\uff0c\u5e76\u4e14\u4e0e\u4ee5\u6027\u80fd\u4e3a\u4e2d\u5fc3\u7684DuckDB\u76f8\u5f53\u3002"}}
{"id": "2506.11870", "pdf": "https://arxiv.org/pdf/2506.11870", "abs": "https://arxiv.org/abs/2506.11870", "authors": ["Ce Lyu", "Minghao Zhao", "Yanhao Wang", "Liang Jie"], "title": "LLM-based Dynamic Differential Testing for Database Connectors with Reinforcement Learning-Guided Prompt Selection", "categories": ["cs.DB", "68N99", "H.2.4; D.2.5"], "comment": "5 pages", "summary": "Database connectors are critical components enabling applications to interact\nwith underlying database management systems (DBMS), yet their security\nvulnerabilities often remain overlooked. Unlike traditional software defects,\nconnector vulnerabilities exhibit subtle behavioral patterns and are inherently\nchallenging to detect. Besides, nonstandardized implementation of connectors\nleaves potential risks (a.k.a. unsafe implementations) but is more elusive. As\na result, traditional fuzzing methods are incapable of finding such\nvulnerabilities. Even for LLM-enable test case generation, due to a lack of\ndomain knowledge, they are also incapable of generating test cases that invoke\nall interface and internal logic of connectors. In this paper, we propose\nreinforcement learning (RL)-guided LLM test-case generation for database\nconnector testing. Specifically, to equip the LLM with sufficient and\nappropriate domain knowledge, a parameterized prompt template is composed which\ncan be utilized to generate numerous prompts. Test cases are generated via LLM\nwith a prompt, and are dynamically evaluated through differential testing\nacross multiple connectors. The testing is iteratively conducted, with each\nround RL is adopted to select optimal prompt based on prior-round behavioral\nfeedback, so as to maximize control flow coverage. We implement aforementioned\nmethodology in a practical tool and evaluate it on two widely used JDBC\nconnectors: MySQL Connector/J and OceanBase Connector/J. In total, we reported\n16 bugs, among them 10 are officially confirmed and the rest are acknowledged\nas unsafe implementations.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u5f15\u5bfc\u7684LLM\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u65b9\u6cd5\uff0c\u7528\u4e8e\u53d1\u73b0\u6570\u636e\u5e93\u8fde\u63a5\u5668\u4e2d\u7684\u5b89\u5168\u6f0f\u6d1e\u3002", "motivation": "\u6570\u636e\u5e93\u8fde\u63a5\u5668\u7684\u5b89\u5168\u6f0f\u6d1e\u7ecf\u5e38\u88ab\u5ffd\u89c6\uff0c\u4f20\u7edf\u7684\u6a21\u7cca\u6d4b\u8bd5\u65b9\u6cd5\u65e0\u6cd5\u627e\u5230\u8fd9\u4e9b\u6f0f\u6d1e\u3002\u5373\u4f7f\u662fLLM\u652f\u6301\u7684\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\uff0c\u7531\u4e8e\u7f3a\u4e4f\u9886\u57df\u77e5\u8bc6\uff0c\u4e5f\u65e0\u6cd5\u751f\u6210\u8c03\u7528\u8fde\u63a5\u5668\u7684\u6240\u6709\u63a5\u53e3\u548c\u5185\u90e8\u903b\u8f91\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5f3a\u5316\u5b66\u4e60\uff08RL\uff09\u5f15\u5bfc\u7684LLM\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u65b9\u6cd5\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u8fde\u63a5\u5668\u6d4b\u8bd5\u3002", "result": "\u5728\u4e24\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684JDBC\u8fde\u63a5\u5668\uff1aMySQL Connector/J\u548cOceanBase Connector/J\u4e0a\u8fdb\u884c\u4e86\u8bc4\u4f30\u3002\u603b\u5171\u62a5\u544a\u4e8616\u4e2abug\uff0c\u5176\u4e2d10\u4e2a\u5df2\u5f97\u5230\u5b98\u65b9\u786e\u8ba4\uff0c\u5176\u4f59\u7684\u88ab\u8ba4\u4e3a\u662f\u5b58\u5728\u4e0d\u5b89\u5168\u5b9e\u73b0\u3002", "conclusion": "\u8be5\u7814\u7a76\u62a5\u544a\u4e86\u5728\u4e24\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684JDBC\u8fde\u63a5\u5668\u4e2d\u53d1\u73b0\u768416\u4e2abug\uff0c\u5176\u4e2d10\u4e2a\u5df2\u5f97\u5230\u5b98\u65b9\u786e\u8ba4\uff0c\u5176\u4f59\u7684\u88ab\u8ba4\u4e3a\u662f\u5b58\u5728\u4e0d\u5b89\u5168\u5b9e\u73b0\u3002", "summary_zh": "\u6570\u636e\u5e93\u8fde\u63a5\u5668\u662f\u4f7f\u5e94\u7528\u7a0b\u5e8f\u4e0e\u5e95\u5c42\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08DBMS\uff09\u4ea4\u4e92\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u4f46\u5176\u5b89\u5168\u6f0f\u6d1e\u7ecf\u5e38\u88ab\u5ffd\u89c6\u3002\u4e0e\u4f20\u7edf\u7684\u8f6f\u4ef6\u7f3a\u9677\u4e0d\u540c\uff0c\u8fde\u63a5\u5668\u6f0f\u6d1e\u8868\u73b0\u51fa\u5fae\u5999\u7684\u884c\u4e3a\u6a21\u5f0f\uff0c\u5e76\u4e14\u672c\u8d28\u4e0a\u96be\u4ee5\u68c0\u6d4b\u3002\u6b64\u5916\uff0c\u8fde\u63a5\u5668\u7684\u975e\u6807\u51c6\u5316\u5b9e\u73b0\u7559\u4e0b\u4e86\u6f5c\u5728\u7684\u98ce\u9669\uff08\u5373\u4e0d\u5b89\u5168\u5b9e\u73b0\uff09\uff0c\u4f46\u66f4\u96be\u4ee5\u6349\u6478\u3002\u56e0\u6b64\uff0c\u4f20\u7edf\u7684\u6a21\u7cca\u6d4b\u8bd5\u65b9\u6cd5\u65e0\u6cd5\u627e\u5230\u6b64\u7c7b\u6f0f\u6d1e\u3002\u5373\u4f7f\u5bf9\u4e8eLLM\u652f\u6301\u7684\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\uff0c\u7531\u4e8e\u7f3a\u4e4f\u9886\u57df\u77e5\u8bc6\uff0c\u5b83\u4eec\u4e5f\u65e0\u6cd5\u751f\u6210\u8c03\u7528\u8fde\u63a5\u5668\u7684\u6240\u6709\u63a5\u53e3\u548c\u5185\u90e8\u903b\u8f91\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u5f3a\u5316\u5b66\u4e60\uff08RL\uff09\u5f15\u5bfc\u7684LLM\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u65b9\u6cd5\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u8fde\u63a5\u5668\u6d4b\u8bd5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e3a\u4e86\u4f7fLLM\u5177\u5907\u5145\u5206\u548c\u9002\u5f53\u7684\u9886\u57df\u77e5\u8bc6\uff0c\u6211\u4eec\u7ec4\u6210\u4e86\u4e00\u4e2a\u53c2\u6570\u5316\u7684\u63d0\u793a\u6a21\u677f\uff0c\u8be5\u6a21\u677f\u53ef\u7528\u4e8e\u751f\u6210\u5927\u91cf\u63d0\u793a\u3002\u6d4b\u8bd5\u7528\u4f8b\u901a\u8fc7\u5e26\u6709\u63d0\u793a\u7684LLM\u751f\u6210\uff0c\u5e76\u901a\u8fc7\u8de8\u591a\u4e2a\u8fde\u63a5\u5668\u7684\u5dee\u5f02\u6d4b\u8bd5\u8fdb\u884c\u52a8\u6001\u8bc4\u4f30\u3002\u6d4b\u8bd5\u662f\u8fed\u4ee3\u8fdb\u884c\u7684\uff0c\u6bcf\u4e00\u8f6e\u90fd\u91c7\u7528RL\u6765\u6839\u636e\u524d\u4e00\u8f6e\u7684\u884c\u4e3a\u53cd\u9988\u9009\u62e9\u6700\u4f73\u63d0\u793a\uff0c\u4ece\u800c\u6700\u5927\u5316\u63a7\u5236\u6d41\u8986\u76d6\u7387\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u5b9e\u9645\u5de5\u5177\u4e2d\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u5e76\u5728\u4e24\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684JDBC\u8fde\u63a5\u5668\u4e0a\u5bf9\u5176\u8fdb\u884c\u4e86\u8bc4\u4f30\uff1aMySQL Connector/J\u548cOceanBase Connector/J\u3002\u603b\u5171\u62a5\u544a\u4e8616\u4e2abug\uff0c\u5176\u4e2d10\u4e2a\u5df2\u5f97\u5230\u5b98\u65b9\u786e\u8ba4\uff0c\u5176\u4f59\u7684\u88ab\u8ba4\u4e3a\u662f\u5b58\u5728\u4e0d\u5b89\u5168\u5b9e\u73b0\u3002"}}
{"id": "2506.11010", "pdf": "https://arxiv.org/pdf/2506.11010", "abs": "https://arxiv.org/abs/2506.11010", "authors": ["Emilio Porcu", "Roy El Moukari", "Laurent Najman", "Francisco Herrera", "Horst Simon"], "title": "Data Science: a Natural Ecosystem", "categories": ["cs.LG", "cs.AI", "cs.DB", "stat.ML"], "comment": null, "summary": "This manuscript provides a holistic (data-centric) view of what we term\nessential data science, as a natural ecosystem with challenges and missions\nstemming from the data universe with its multiple combinations of the 5D\ncomplexities (data structure, domain, cardinality, causality, and ethics) with\nthe phases of the data life cycle. Data agents perform tasks driven by specific\ngoals. The data scientist is an abstract entity that comes from the logical\norganization of data agents with their actions. Data scientists face challenges\nthat are defined according to the missions. We define specific\ndiscipline-induced data science, which in turn allows for the definition of\npan-data science, a natural ecosystem that integrates specific disciplines with\nthe essential data science. We semantically split the essential data science\ninto computational, and foundational. We claim that there is a serious threat\nof divergence between computational and foundational data science. Especially,\nif no approach is taken to rate whether a data universe discovery should be\nuseful or not. We suggest that rigorous approaches to measure the usefulness of\ndata universe discoveries might mitigate such a divergence.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u5fc5\u8981\u6570\u636e\u79d1\u5b66\u7684\u6311\u6218\u4e0e\u4efb\u52a1\uff0c\u5e76\u63d0\u51fa\u8861\u91cf\u6570\u636e\u5b87\u5b99\u53d1\u73b0\u7684\u6709\u7528\u6027\u4ee5\u907f\u514d\u8ba1\u7b97\u4e0e\u57fa\u7840\u6570\u636e\u79d1\u5b66\u5206\u6b67\u7684\u89c2\u70b9\u3002", "motivation": "\u63a2\u8ba8\u7531\u6570\u636e\u5b87\u5b99\u76845D\u590d\u6742\u6027\u4e0e\u6570\u636e\u751f\u547d\u5468\u671f\u9636\u6bb5\u7684\u591a\u91cd\u7ec4\u5408\u6240\u4ea7\u751f\u7684\u6311\u6218\u548c\u4efb\u52a1\u3002", "method": "\u901a\u8fc7\u8bed\u4e49\u5c06\u5fc5\u8981\u7684\u6570\u636e\u79d1\u5b66\u5206\u4e3a\u8ba1\u7b97\u548c\u57fa\u7840\u4e24\u90e8\u5206\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u79cd\u8bc4\u4f30\u6570\u636e\u5b87\u5b99\u53d1\u73b0\u6709\u7528\u6027\u7684\u65b9\u6cd5\u3002", "result": "\u5b9a\u4e49\u4e86\u7279\u5b9a\u5b66\u79d1\u8bf1\u5bfc\u7684\u6570\u636e\u79d1\u5b66\u548c\u6cdb\u6570\u636e\u79d1\u5b66\uff0c\u5e76\u4ece\u8bed\u4e49\u4e0a\u5c06\u5fc5\u8981\u7684\u6570\u636e\u79d1\u5b66\u5206\u4e3a\u8ba1\u7b97\u578b\u548c\u57fa\u7840\u578b\u3002", "conclusion": "\u9700\u8981\u91c7\u53d6\u4e25\u683c\u7684\u65b9\u6cd5\u6765\u8861\u91cf\u6570\u636e\u5b87\u5b99\u53d1\u73b0\u7684\u6709\u7528\u6027\uff0c\u4ee5\u51cf\u8f7b\u8ba1\u7b97\u6570\u636e\u79d1\u5b66\u548c\u57fa\u7840\u6570\u636e\u79d1\u5b66\u4e4b\u95f4\u7684\u5206\u6b67\u98ce\u9669\u3002", "summary_zh": "\u672c\u6587\u4ece\u6574\u4f53\u7684\uff08\u4ee5\u6570\u636e\u4e3a\u4e2d\u5fc3\u7684\uff09\u89c6\u89d2\u9610\u8ff0\u4e86\u6211\u4eec\u79f0\u4e4b\u4e3a\u5fc5\u8981\u6570\u636e\u79d1\u5b66\u7684\u89c2\u70b9\uff0c\u5b83\u662f\u4e00\u4e2a\u81ea\u7136\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u5176\u6311\u6218\u548c\u4efb\u52a1\u6e90\u4e8e\u6570\u636e\u5b87\u5b99\uff0c\u6570\u636e\u5b87\u5b99\u5177\u67095D\u590d\u6742\u6027\u7684\u591a\u79cd\u7ec4\u5408\uff08\u6570\u636e\u7ed3\u6784\u3001\u9886\u57df\u3001\u57fa\u6570\u3001\u56e0\u679c\u5173\u7cfb\u548c\u4f26\u7406\uff09\uff0c\u5e76\u4e0e\u6570\u636e\u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\u76f8\u5173\u8054\u3002\u6570\u636e\u4ee3\u7406\u6267\u884c\u7531\u7279\u5b9a\u76ee\u6807\u9a71\u52a8\u7684\u4efb\u52a1\u3002\u6570\u636e\u79d1\u5b66\u5bb6\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u5b9e\u4f53\uff0c\u5b83\u6765\u81ea\u6570\u636e\u4ee3\u7406\u4e0e\u5176\u884c\u52a8\u7684\u903b\u8f91\u7ec4\u7ec7\u3002\u6570\u636e\u79d1\u5b66\u5bb6\u9762\u4e34\u7740\u6839\u636e\u4efb\u52a1\u5b9a\u4e49\u7684\u6311\u6218\u3002\u6211\u4eec\u5b9a\u4e49\u4e86\u7279\u5b9a\u7684\u5b66\u79d1\u8bf1\u5bfc\u7684\u6570\u636e\u79d1\u5b66\uff0c\u8fd9\u53cd\u8fc7\u6765\u53c8\u5141\u8bb8\u5b9a\u4e49\u6cdb\u6570\u636e\u79d1\u5b66\uff0c\u8fd9\u662f\u4e00\u4e2a\u5c06\u7279\u5b9a\u5b66\u79d1\u4e0e\u5fc5\u8981\u6570\u636e\u79d1\u5b66\u76f8\u7ed3\u5408\u7684\u81ea\u7136\u751f\u6001\u7cfb\u7edf\u3002\u6211\u4eec\u4ece\u8bed\u4e49\u4e0a\u5c06\u5fc5\u8981\u7684\u6570\u636e\u79d1\u5b66\u5206\u4e3a\u8ba1\u7b97\u578b\u548c\u57fa\u7840\u578b\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u8ba1\u7b97\u6570\u636e\u79d1\u5b66\u548c\u57fa\u7840\u6570\u636e\u79d1\u5b66\u4e4b\u95f4\u5b58\u5728\u4e25\u91cd\u7684\u5206\u6b67\u5a01\u80c1\u3002\u7279\u522b\u662f\uff0c\u5982\u679c\u6ca1\u6709\u91c7\u53d6\u4efb\u4f55\u65b9\u6cd5\u6765\u8bc4\u4f30\u6570\u636e\u5b87\u5b99\u7684\u53d1\u73b0\u662f\u5426\u6709\u7528\u3002\u6211\u4eec\u5efa\u8bae\uff0c\u91c7\u53d6\u4e25\u683c\u7684\u65b9\u6cd5\u6765\u8861\u91cf\u6570\u636e\u5b87\u5b99\u53d1\u73b0\u7684\u6709\u7528\u6027\uff0c\u53ef\u80fd\u4f1a\u51cf\u8f7b\u8fd9\u79cd\u5206\u6b67\u3002"}}
{"id": "2506.11986", "pdf": "https://arxiv.org/pdf/2506.11986", "abs": "https://arxiv.org/abs/2506.11986", "authors": ["Wuzhenghong Wen", "Su Pan", "yuwei Sun"], "title": "Schema-R1: A reasoning training approach for schema linking in Text-to-SQL Task", "categories": ["cs.AI", "cs.CL", "cs.DB"], "comment": "11 pages, 3 figures, conference", "summary": "Schema linking is a critical step in Text-to-SQL task, aiming to accurately\npredict the table names and column names required for the SQL query based on\nthe given question. However, current fine-tuning approaches for schema linking\nmodels employ a rote-learning paradigm, excessively optimizing for ground truth\nschema linking outcomes while compromising reasoning ability. This limitation\narises because of the difficulty in acquiring a high-quality reasoning sample\nfor downstream tasks. To address this, we propose Schema-R1, a reasoning schema\nlinking model trained using reinforcement learning. Specifically, Schema-R1\nconsists of three key steps: constructing small batches of high-quality\nreasoning samples, supervised fine-tuning for cold-start initialization, and\nrule-based reinforcement learning training. The final results demonstrate that\nour method effectively enhances the reasoning ability of the schema linking\nmodel, achieving a 10\\% improvement in filter accuracy compared to the existing\nmethod. Our code is available at https://github.com/hongWin/Schema-R1/.", "AI": {"tldr": "Schema-R1\u901a\u8fc7\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u63a8\u7406\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\uff0c\u6709\u6548\u63d0\u5347\u4e86Text-to-SQL\u4efb\u52a1\u4e2d\u6a21\u5f0f\u94fe\u63a5\u7684\u63a8\u7406\u80fd\u529b\u3002", "motivation": "\u5f53\u524d\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u7684\u5fae\u8c03\u65b9\u6cd5\u91c7\u7528\u6b7b\u8bb0\u786c\u80cc\u6a21\u5f0f\uff0c\u8fc7\u5ea6\u4f18\u5316ground truth\u6a21\u5f0f\u94fe\u63a5\u7ed3\u679c\uff0c\u4ece\u800c\u635f\u5bb3\u4e86\u63a8\u7406\u80fd\u529b\u3002\u8fd9\u662f\u7531\u4e8e\u96be\u4ee5\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u4e0b\u6e38\u4efb\u52a1\u63a8\u7406\u6837\u672c\u3002", "method": "\u63d0\u51fa\u4e86Schema-R1\uff0c\u4e00\u4e2a\u4f7f\u7528\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u7684\u63a8\u7406\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\uff0c\u5305\u62ec\u6784\u5efa\u9ad8\u8d28\u91cf\u63a8\u7406\u6837\u672c\u5c0f\u6279\u91cf\u3001\u7528\u4e8e\u51b7\u542f\u52a8\u521d\u59cb\u5316\u7684\u76d1\u7763\u5fae\u8c03\u548c\u57fa\u4e8e\u89c4\u5219\u7684\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u6709\u6548\u63d0\u5347\u4e86\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u7684\u63a8\u7406\u80fd\u529b\uff0c\u8fc7\u6ee4\u7cbe\u5ea6\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u9ad8\u4e8610%\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u63d0\u5347\u4e86\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u7684\u63a8\u7406\u80fd\u529b\uff0c\u8fc7\u6ee4\u7cbe\u5ea6\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u9ad8\u4e8610%\u3002", "summary_zh": "\u6a21\u5f0f\u94fe\u63a5\u662fText-to-SQL\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u6b65\u9aa4\uff0c\u65e8\u5728\u6839\u636e\u7ed9\u5b9a\u7684\u95ee\u9898\u51c6\u786e\u9884\u6d4bSQL\u67e5\u8be2\u6240\u9700\u7684\u8868\u540d\u548c\u5217\u540d\u3002\u7136\u800c\uff0c\u5f53\u524d\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u7684\u5fae\u8c03\u65b9\u6cd5\u91c7\u7528\u6b7b\u8bb0\u786c\u80cc\u6a21\u5f0f\uff0c\u8fc7\u5ea6\u4f18\u5316ground truth\u6a21\u5f0f\u94fe\u63a5\u7ed3\u679c\uff0c\u4ece\u800c\u635f\u5bb3\u4e86\u63a8\u7406\u80fd\u529b\u3002\u8fd9\u79cd\u9650\u5236\u662f\u7531\u4e8e\u96be\u4ee5\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u4e0b\u6e38\u4efb\u52a1\u63a8\u7406\u6837\u672c\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa\u4e86Schema-R1\uff0c\u4e00\u4e2a\u4f7f\u7528\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u7684\u63a8\u7406\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u3002\u5177\u4f53\u6765\u8bf4\uff0cSchema-R1\u5305\u62ec\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4\uff1a\u6784\u5efa\u9ad8\u8d28\u91cf\u63a8\u7406\u6837\u672c\u5c0f\u6279\u91cf\u3001\u7528\u4e8e\u51b7\u542f\u52a8\u521d\u59cb\u5316\u7684\u76d1\u7763\u5fae\u8c03\u548c\u57fa\u4e8e\u89c4\u5219\u7684\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u3002\u6700\u7ec8\u7ed3\u679c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u6709\u6548\u63d0\u5347\u4e86\u6a21\u5f0f\u94fe\u63a5\u6a21\u578b\u7684\u63a8\u7406\u80fd\u529b\uff0c\u8fc7\u6ee4\u7cbe\u5ea6\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u9ad8\u4e8610%\u3002\u6211\u4eec\u7684\u4ee3\u7801\u53ef\u5728https://github.com/hongWin/Schema-R1/\u83b7\u53d6\u3002"}}
