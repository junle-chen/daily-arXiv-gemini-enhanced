{"id": "2509.20781", "pdf": "https://arxiv.org/pdf/2509.20781", "abs": "https://arxiv.org/abs/2509.20781", "authors": ["Alireza Heidari", "Amirhossein Ahmad", "Wei Zhang", "Ying Xiong"], "title": "Sig2Model: A Boosting-Driven Model for Updatable Learned Indexes", "categories": ["cs.LG", "cs.DB", "cs.PF"], "comment": "22 pages, 11 figures", "summary": "Learned Indexes (LIs) represent a paradigm shift from traditional index\nstructures by employing machine learning models to approximate the cumulative\ndistribution function (CDF) of sorted data. While LIs achieve remarkable\nefficiency for static datasets, their performance degrades under dynamic\nupdates: maintaining the CDF invariant (sum of F(k) equals 1) requires global\nmodel retraining, which blocks queries and limits the queries-per-second (QPS)\nmetric. Current approaches fail to address these retraining costs effectively,\nrendering them unsuitable for real-world workloads with frequent updates. In\nthis paper, we present Sig2Model, an efficient and adaptive learned index that\nminimizes retraining cost through three key techniques: (1) a sigmoid boosting\napproximation technique that dynamically adjusts the index model by\napproximating update-induced shifts in data distribution with localized sigmoid\nfunctions while preserving bounded error guarantees and deferring full\nretraining; (2) proactive update training via Gaussian mixture models (GMMs)\nthat identifies high-update-probability regions for strategic placeholder\nallocation to speed up updates; and (3) a neural joint optimization framework\nthat continuously refines both the sigmoid ensemble and GMM parameters via\ngradient-based learning. We evaluate Sig2Model against state-of-the-art\nupdatable learned indexes on real-world and synthetic workloads, and show that\nSig2Model reduces retraining cost by up to 20x, achieves up to 3x higher QPS,\nand uses up to 1000x less memory.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
