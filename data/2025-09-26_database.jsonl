{"id": "2509.19400", "pdf": "https://arxiv.org/pdf/2509.19400", "abs": "https://arxiv.org/abs/2509.19400", "authors": ["Lukas Gerlach", "Lucas Larroque", "Jerzy Marcinkowski", "Piotr Ostropolski-Nalewaja"], "title": "About the Multi-Head Linear Restricted Chase Termination", "categories": ["cs.DB", "cs.LO"], "comment": "Technical report of KR 2025 paper", "summary": "The chase is a ubiquitous algorithm in database theory. However, for\nexistential rules (aka tuple-generating dependencies), its termination is not\nguaranteed, and even undecidable in general. The problem of termination becomes\nparticularly difficult for the restricted (or standard) chase, for which the\norder of rule application matters. Thus, decidability of restricted chase\ntermination is still open for many well-behaved classes such as linear or\nguarded multi-headed rules. We make a step forward by showing that\nall-instances restricted chase termination is decidable in the linear\nmulti-headed case."}
{"id": "2509.19508", "pdf": "https://arxiv.org/pdf/2509.19508", "abs": "https://arxiv.org/abs/2509.19508", "authors": ["Mounica Maddela", "Lingjue Xie", "Daniel Preotiuc-Pietro", "Mausam"], "title": "STARQA: A Question Answering Dataset for Complex Analytical Reasoning over Structured Databases", "categories": ["cs.DB", "cs.CL"], "comment": "Accepted to EMNLP 2025 long paper", "summary": "Semantic parsing methods for converting text to SQL queries enable question\nanswering over structured data and can greatly benefit analysts who routinely\nperform complex analytics on vast data stored in specialized relational\ndatabases. Although several benchmarks measure the abilities of text to SQL,\nthe complexity of their questions is inherently limited by the level of\nexpressiveness in query languages and none focus explicitly on questions\ninvolving complex analytical reasoning which require operations such as\ncalculations over aggregate analytics, time series analysis or scenario\nunderstanding. In this paper, we introduce STARQA, the first public\nhuman-created dataset of complex analytical reasoning questions and answers on\nthree specialized-domain databases. In addition to generating SQL directly\nusing LLMs, we evaluate a novel approach (Text2SQLCode) that decomposes the\ntask into a combination of SQL and Python: SQL is responsible for data\nfetching, and Python more naturally performs reasoning. Our results demonstrate\nthat identifying and combining the abilities of SQL and Python is beneficial\ncompared to using SQL alone, yet the dataset still remains quite challenging\nfor the existing state-of-the-art LLMs."}
{"id": "2509.19621", "pdf": "https://arxiv.org/pdf/2509.19621", "abs": "https://arxiv.org/abs/2509.19621", "authors": ["Albert Atserias", "Phokion G. Kolaitis"], "title": "Gamma Acyclicity, Annotated Relations, and Consistency Witness Functions", "categories": ["cs.DB"], "comment": null, "summary": "During the early days of relational database theory it was realized that\n\"acyclic\" database schemas possess a number of desirable semantic properties.\nIn fact, three different notions of \"acyclicity\" were identified and\nextensively investigated during the 1980s, namely, alpha-acyclicity,\nbeta-acyclicity, and gamma-acyclicity. Much more recently, the study of\nalpha-acyclicity was extended to annotated relations, where the annotations are\nvalues from some positive commutative monoid. The recent results about\nalpha-acyclic schemas and annotated relations give rise to results about\nbeta-acyclic schemas and annotated relations, since a schema is beta-acyclic if\nand only if every sub-schema of it is alpha-acyclic. Here, we study\ngamma-acyclic schemas and annotated relations. Our main finding is that the\ndesirable semantic properties of gamma-acyclic schemas extend to annotated\nrelations, provided the annotations come from a positive commutative monoid\nthat has the transportation property. Furthermore, the results reported here\nshed light on the role of the join of two standard relations, Specifically, our\nresults reveal that the only relevant property of the join of two standard\nrelations is that it is a witness to the consistency of the two relations,\nprovided that these two relations are consistent. For the more abstract setting\nof annotated relations, this property of the standard join is captured by the\nnotion of a consistency witness function, a notion which we systematically\ninvestigate in this work."}
{"id": "2509.19757", "pdf": "https://arxiv.org/pdf/2509.19757", "abs": "https://arxiv.org/abs/2509.19757", "authors": ["Jingyi Yang", "Songsong Mo", "Jiachen Shi", "Zihao Yu", "Kunhao Shi", "Xuchen Ding", "Gao Cong"], "title": "ARCADE: A Real-Time Data System for Hybrid and Continuous Query Processing across Diverse Data Modalities", "categories": ["cs.DB", "cs.AI"], "comment": null, "summary": "The explosive growth of multimodal data - spanning text, image, video,\nspatial, and relational modalities, coupled with the need for real-time\nsemantic search and retrieval over these data - has outpaced the capabilities\nof existing multimodal and real-time database systems, which either lack\nefficient ingestion and continuous query capability, or fall short in\nsupporting expressive hybrid analytics. We introduce ARCADE, a real-time data\nsystem that efficiently supports high-throughput ingestion and expressive\nhybrid and continuous query processing across diverse data types. ARCADE\nintroduces unified disk-based secondary index on LSM-based storage for vector,\nspatial, and text data modalities, a comprehensive cost-based query optimizer\nfor hybrid queries, and an incremental materialized view framework for\nefficient continuous queries. Built on open-source RocksDB storage and MySQL\nquery engine, ARCADE outperforms leading multimodal data systems by up to 7.4x\non read-heavy and 1.4x on write-heavy workloads."}
{"id": "2509.20204", "pdf": "https://arxiv.org/pdf/2509.20204", "abs": "https://arxiv.org/abs/2509.20204", "authors": ["Mahmoud Abo Khamis", "Alexandru-Mihai Hurjui", "Ahmet Kara", "Dan Olteanu", "Dan Suciu", "Zilu Tian"], "title": "Output-Sensitive Evaluation of Acyclic Conjunctive Regular Path Queries", "categories": ["cs.DB", "H.1.0"], "comment": null, "summary": "Conjunctive Regular Path Queries, or CRPQs for short, are an essential\nconstruct in graph query languages. In this paper, we propose the first\noutput-sensitive algorithm for evaluating acyclic CRPQs. It is output-sensitive\nin the sense that its complexity is a function of the sizes of the input graph\nand of the query output. In particular, it does not depend on the output sizes\nof the regular expressions that appear in the query, as these sizes can be much\nlarger than the query output size.\n  Our algorithm proceeds in two stages. In the first stage, it contracts the\ngiven query into a free-connex acyclic one such that the output of the original\nquery can be obtained from the output of the contracted one. This contraction\nremoves bound variables by composing regular expressions or by promoting bound\nvariables to free ones. The minimum necessary number of promoted bound\nvariables gives the contraction width, which is a novel parameter specific to\nCRPQs. In the second stage, our algorithm evaluates the free-connex acyclic\nCRPQ and projects away the columns of the promoted bound variables. It ensures\noutput-sensitivity by computing the calibrated outputs of the regular\nexpressions appearing in the free-connex acyclic CRPQ in time proportional to\ntheir sizes.\n  Our algorithm has lower complexity than the state-of-the-art approaches for\nproblem instances where (i) the query output is asymptotically smaller than the\nworst-case output size or (ii) the largest output size of any of the regular\nexpression in the query."}
{"id": "2509.19767", "pdf": "https://arxiv.org/pdf/2509.19767", "abs": "https://arxiv.org/abs/2509.19767", "authors": ["Alireza Heidari", "Wei Zhang", "Ying Xiong"], "title": "FusedANN: Convexified Hybrid ANN via Attribute-Vector Fusion", "categories": ["cs.IR", "cs.AI", "cs.DB", "math.OC"], "comment": "62 pages,12 figures", "summary": "Vector search powers transformers technology, but real-world use demands\nhybrid queries that combine vector similarity with attribute filters (e.g.,\n\"top document in category X, from 2023\"). Current solutions trade off recall,\nspeed, and flexibility, relying on fragile index hacks that don't scale. We\nintroduce FusedANN (Fused Attribute-Vector Nearest Neighbor), a geometric\nframework that elevates filtering to ANN optimization constraints and\nintroduces a convex fused space via a Lagrangian-like relaxation. Our method\njointly embeds attributes and vectors through transformer-based\nconvexification, turning hard filters into continuous, weighted penalties that\npreserve top-k semantics while enabling efficient approximate search. We prove\nthat FusedANN reduces to exact filtering under high selectivity, gracefully\nrelaxes to semantically nearest attributes when exact matches are insufficient,\nand preserves downstream ANN alpha-approximation guarantees. Empirically,\nFusedANN improves query throughput by eliminating brittle filtering stages,\nachieving superior recall-latency tradeoffs on standard hybrid benchmarks\nwithout specialized index hacks, delivering up to 3 times higher throughput and\nbetter recall than state-of-the-art hybrid and graph-based systems.\nTheoretically, we provide explicit error bounds and parameter selection rules\nthat make FusedANN practical for production. This establishes a principled,\nscalable, and verifiable bridge between symbolic constraints and vector\nsimilarity, unlocking a new generation of filtered retrieval systems for large,\nhybrid, and dynamic NLP/ML workloads."}
{"id": "2509.20208", "pdf": "https://arxiv.org/pdf/2509.20208", "abs": "https://arxiv.org/abs/2509.20208", "authors": ["Parker Glenn", "Alfy Samuel", "Daben Liu"], "title": "Play by the Type Rules: Inferring Constraints for LLM Functions in Declarative Programs", "categories": ["cs.CL", "cs.AI", "cs.DB"], "comment": null, "summary": "Integrating LLM powered operators in declarative query languages allows for\nthe combination of cheap and interpretable functions with powerful,\ngeneralizable language model reasoning. However, in order to benefit from the\noptimized execution of a database query language like SQL, generated outputs\nmust align with the rules enforced by both type checkers and database contents.\nCurrent approaches address this challenge with orchestrations consisting of\nmany LLM-based post-processing calls to ensure alignment between generated\noutputs and database values, introducing performance bottlenecks. We perform a\nstudy on the ability of various sized open-source language models to both parse\nand execute functions within a query language based on SQL, showing that small\nlanguage models can excel as function executors over hybrid data sources. Then,\nwe propose an efficient solution to enforce the well-typedness of LLM\nfunctions, demonstrating 7% accuracy improvement on a multi-hop question\nanswering dataset with 53% improvement in latency over comparable solutions. We\nmake our implementation available at https://github.com/parkervg/blendsql"}
