{"id": "2510.22314", "pdf": "https://arxiv.org/pdf/2510.22314", "abs": "https://arxiv.org/abs/2510.22314", "authors": ["Christian Imenkamp", "Martin Kabierski", "Hendrik Reiter", "Matthias Weidlich", "Wilhelm Hasselbring", "Agnes Koschmider"], "title": "Determining Window Sizes using Species Estimation for Accurate Process Mining over Streams", "categories": ["cs.DB"], "comment": null, "summary": "Streaming process mining deals with the real-time analysis of event streams.\nA common approach for it is to adopt windowing mechanisms that select event\ndata from a stream for subsequent analysis. However, the size of these windows\ndenotes a crucial parameter, as it influences the representativeness of the\nwindow content and, by extension, of the analysis results. Given that process\ndynamics are subject to changes and potential concept drift, a static, fixed\nwindow size leads to inaccurate representations that introduce bias in the\nanalysis. In this work, we present a novel approach for streaming process\nmining that addresses these limitations by adjusting window sizes.\nSpecifically, we dynamically determine suitable window sizes based on\nestimators for the representativeness of samples as developed for species\nestimation in biodiversity research. Evaluation results on real-world data sets\nshow improvements over existing approaches that adopt static window sizes in\nterms of accuracy and robustness to concept drifts.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.22316", "pdf": "https://arxiv.org/pdf/2510.22316", "abs": "https://arxiv.org/abs/2510.22316", "authors": ["Zhiyuan Hua", "Qiji Mo", "Zebin Yao", "Lixiao Cui", "Xiaoguang Liu", "Gang Wang", "Zijing Wei", "Xinyu Liu", "Tianxiao Tang", "Shaozhi Liu", "Lin Qu"], "title": "Dynamically Detect and Fix Hardness for Efficient Approximate Nearest Neighbor Search", "categories": ["cs.DB"], "comment": "Accepted by SIGMOD2026", "summary": "Approximate Nearest Neighbor Search (ANNS) has become a fundamental component\nin many real-world applications. Among various ANNS algorithms, graph-based\nmethods are state-of-the-art. However, ANNS often suffers from a significant\ndrop in accuracy for certain queries, especially in Out-of-Distribution (OOD)\nscenarios. To address this issue, a recent approach named RoarGraph constructs\na bipartite graph between the base data and historical queries to bridge the\ngap between two different distributions. However, it suffers from some\nlimitations: (1) Building a bipartite graph between two distributions lacks\ntheoretical support, resulting in the query distribution not being effectively\nutilized by the graph index. (2) Requires a sufficient number of historical\nqueries before graph construction and suffers from high construction times. (3)\nWhen the query workload changes, it requires reconstruction to maintain high\nsearch accuracy.\n  In this paper, we first propose Escape Hardness, a metric to evaluate the\nquality of the graph structure around the query. Then we divide the graph\nsearch into two stages and dynamically identify and fix defective graph regions\nin each stage based on Escape Hardness. (1) From the entry point to the\nvicinity of the query. We propose Reachability Fixing (RFix), which enhances\nthe navigability of some key nodes. (2) Searching within the vicinity of the\nquery. We propose Neighboring Graph Defects Fixing (NGFix) to improve graph\nconnectivity in regions where queries are densely distributed. The results of\nextensive experiments show that our method outperforms other state-of-the-art\nmethods on real-world datasets, achieving up to 2.25x faster search speed for\nOOD queries at 99% recall compared with RoarGraph and 6.88x faster speed\ncompared with HNSW. It also accelerates index construction by 2.35-9.02x\ncompared to RoarGraph.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.23587", "pdf": "https://arxiv.org/pdf/2510.23587", "abs": "https://arxiv.org/abs/2510.23587", "authors": ["Yizhang Zhu", "Liangwei Wang", "Chenyu Yang", "Xiaotian Lin", "Boyan Li", "Wei Zhou", "Xinyu Liu", "Zhangyang Peng", "Tianqi Luo", "Yu Li", "Chengliang Chai", "Chong Chen", "Shimin Di", "Ju Fan", "Ji Sun", "Nan Tang", "Fugee Tsung", "Jiannan Wang", "Chenglin Wu", "Yanwei Xu", "Shaolei Zhang", "Yong Zhang", "Xuanhe Zhou", "Guoliang Li", "Yuyu Luo"], "title": "A Survey of Data Agents: Emerging Paradigm or Overstated Hype?", "categories": ["cs.DB", "cs.AI"], "comment": "Please refer to our paper list and companion materials at:\n  https://github.com/HKUSTDial/awesome-data-agents", "summary": "The rapid advancement of large language models (LLMs) has spurred the\nemergence of data agents--autonomous systems designed to orchestrate Data + AI\necosystems for tackling complex data-related tasks. However, the term \"data\nagent\" currently suffers from terminological ambiguity and inconsistent\nadoption, conflating simple query responders with sophisticated autonomous\narchitectures. This terminological ambiguity fosters mismatched user\nexpectations, accountability challenges, and barriers to industry growth.\nInspired by the SAE J3016 standard for driving automation, this survey\nintroduces the first systematic hierarchical taxonomy for data agents,\ncomprising six levels that delineate and trace progressive shifts in autonomy,\nfrom manual operations (L0) to a vision of generative, fully autonomous data\nagents (L5), thereby clarifying capability boundaries and responsibility\nallocation. Through this lens, we offer a structured review of existing\nresearch arranged by increasing autonomy, encompassing specialized data agents\nfor data management, preparation, and analysis, alongside emerging efforts\ntoward versatile, comprehensive systems with enhanced autonomy. We further\nanalyze critical evolutionary leaps and technical gaps for advancing data\nagents, especially the ongoing L2-to-L3 transition, where data agents evolve\nfrom procedural execution to autonomous orchestration. Finally, we conclude\nwith a forward-looking roadmap, envisioning the advent of proactive, generative\ndata agents.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.22400", "pdf": "https://arxiv.org/pdf/2510.22400", "abs": "https://arxiv.org/abs/2510.22400", "authors": ["Fei Shao", "Jia Zou", "Zhichao Cao", "Xusheng Xiao"], "title": "ProGQL: A Provenance Graph Query System for Cyber Attack Investigation", "categories": ["cs.CR", "cs.DB"], "comment": null, "summary": "Provenance analysis (PA) has recently emerged as an important solution for\ncyber attack investigation. PA leverages system monitoring to monitor system\nactivities as a series of system audit events and organizes these events as a\nprovenance graph to show the dependencies among system activities, which can\nreveal steps of cyber attacks. Despite their potential, existing PA techniques\nface two critical challenges: (1) they are inflexible and non-extensible,\nmaking it difficult to incorporate analyst expertise, and (2) they are memory\ninefficient, often requiring>100GB of RAM to hold entire event streams, which\nfundamentally limits scalability and deployment in real-world environments. To\naddress these limitations, we propose the PROGQL framework, which provides a\ndomain-specific graph search language with a well-engineered query engine,\nallowing PA over system audit events and expert knowledge to be jointly\nexpressed as a graph search query and thereby facilitating the investigation of\ncomplex cyberattacks. In particular, to support dependency searches from a\nstarting edge required in PA, PROGQL introduces new language constructs for\nconstrained graph traversal, edge weight computation, value propagation along\nweighted edges, and graph merging to integrate multiple searches. Moreover, the\nPROGQL query engine is optimized for efficient incremental graph search across\nheterogeneous database backends, eliminating the need for full in-memory\nmaterialization and reducing memory overhead. Our evaluations on real attacks\ndemonstrate the effectiveness of the PROGQL language in expressing a diverse\nset of complex attacks compared with the state-of-the-art graph query language\nCypher, and the comparison with the SOTA PA technique DEPIMPACT further\ndemonstrates the significant improvement of the scalability brought by our\nPROGQL framework's design.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
{"id": "2510.22734", "pdf": "https://arxiv.org/pdf/2510.22734", "abs": "https://arxiv.org/abs/2510.22734", "authors": ["Yuanhao Lai", "Pengfei Zheng", "Chenpeng Ji", "Yan Li", "Songhan Zhang", "Rutao Zhang", "Zhengang Wang", "Yunfei Du"], "title": "Centrum: Model-based Database Auto-tuning with Minimal Distributional Assumptions", "categories": ["cs.LG", "cs.DB", "stat.ME"], "comment": "26 pages", "summary": "Gaussian-Process-based Bayesian optimization (GP-BO), is a prevailing\nmodel-based framework for DBMS auto-tuning. However, recent work shows\nGP-BO-based DBMS auto-tuners significantly outperformed auto-tuners based on\nSMAC, which features random forest surrogate models; such results motivate us\nto rethink and investigate the limitations of GP-BO in auto-tuner design. We\nfind the fundamental assumptions of GP-BO are widely violated when modeling and\noptimizing DBMS performance, while tree-ensemble-BOs (e.g., SMAC) can avoid the\nassumption pitfalls and deliver improved tuning efficiency and effectiveness.\nMoreover, we argue that existing tree-ensemble-BOs restrict further advancement\nin DBMS auto-tuning. First, existing tree-ensemble-BOs can only achieve\ndistribution-free point estimates, but still impose unrealistic distributional\nassumptions on uncertainty estimates, compromising surrogate modeling and\ndistort the acquisition function. Second, recent advances in gradient boosting,\nwhich can further enhance surrogate modeling against vanilla GP and random\nforest counterparts, have rarely been applied in optimizing DBMS auto-tuners.\nTo address these issues, we propose a novel model-based DBMS auto-tuner,\nCentrum. Centrum improves distribution-free point and interval estimation in\nsurrogate modeling with a two-phase learning procedure of stochastic gradient\nboosting ensembles. Moreover, Centrum adopts a generalized SGBE-estimated\nlocally-adaptive conformal prediction to facilitate a distribution-free\nuncertainty estimation and acquisition function. To our knowledge, Centrum is\nthe first auto-tuner to realize distribution-freeness, enhancing BO's\npracticality in DBMS auto-tuning, and the first to seamlessly fuse gradient\nboosting ensembles and conformal inference in BO. Extensive physical and\nsimulation experiments on two DBMSs and three workloads show Centrum\noutperforms 21 SOTA methods.", "AI": {"tldr": "\u8fbe\u5230API\u914d\u989d\u9650\u5236\uff0c\u8bf7\u660e\u5929\u518d\u8bd5", "motivation": "Error: API quota exceeded", "method": "Error: API quota exceeded", "result": "Error: API quota exceeded", "conclusion": "\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u7b49\u5f85\u660e\u5929API\u914d\u989d\u91cd\u7f6e\u3002"}}
